

Language.Haskell.HsColour.General.dropLast
Language.Haskell.HsColour.General
8
1
1
dropLast :: Eq a => a -> [a] -> [a]


x
Language.Haskell.HsColour.General
8
10
1
x :: a


y
Language.Haskell.HsColour.General
8
13
1
y :: a


x
Language.Haskell.HsColour.General
8
18
1
x :: a


GHC.Classes.==
Language.Haskell.HsColour.General
8
20
1
(==) :: Eq a => a -> a -> Bool


y
Language.Haskell.HsColour.General
8
23
1
y :: a


GHC.Types.[]
Language.Haskell.HsColour.General
8
27
1
[] :: [a]


x
Language.Haskell.HsColour.General
9
10
1
x :: a


y
Language.Haskell.HsColour.General
9
13
1
y :: a


ys
Language.Haskell.HsColour.General
9
15
1
ys :: [a]


y
Language.Haskell.HsColour.General
9
21
1
y :: a


GHC.Types.:
Language.Haskell.HsColour.General
9
23
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.General.dropLast
Language.Haskell.HsColour.General
9
25
1
dropLast :: Eq a => a -> [a] -> [a]


x
Language.Haskell.HsColour.General
9
34
1
x :: a


ys
Language.Haskell.HsColour.General
9
36
1
ys :: [a]


x
Language.Haskell.HsColour.General
10
10
1
x :: a


GHC.Types.[]
Language.Haskell.HsColour.General
10
17
1
[] :: [a]


Language.Haskell.HsColour.General.dropFirst
Language.Haskell.HsColour.General
14
1
1
dropFirst :: Eq a => a -> [a] -> [a]


x
Language.Haskell.HsColour.General
14
11
1
x :: a


y
Language.Haskell.HsColour.General
14
14
1
y :: a


ys
Language.Haskell.HsColour.General
14
16
1
ys :: [a]


x
Language.Haskell.HsColour.General
14
22
1
x :: a


GHC.Classes.==
Language.Haskell.HsColour.General
14
24
1
(==) :: Eq a => a -> a -> Bool


y
Language.Haskell.HsColour.General
14
27
1
y :: a


ys
Language.Haskell.HsColour.General
14
31
1
ys :: [a]


x
Language.Haskell.HsColour.General
15
11
1
x :: a


ys
Language.Haskell.HsColour.General
15
13
1
ys :: [a]


ys
Language.Haskell.HsColour.General
15
18
1
ys :: [a]




Language.Haskell.HsColour.Classify.$con2tag_TokenType
Language.Haskell.HsColour.Classify
1
1
1
($con2tag_TokenType) :: TokenType -> Int#


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.Classify
12
1
1
tokenise :: String -> [(TokenType, String)]


str
Language.Haskell.HsColour.Classify
12
10
1
str :: String


chunks
Language.Haskell.HsColour.Classify
13
9
1
chunks :: [[Char]]


Language.Haskell.HsColour.Classify.glue
Language.Haskell.HsColour.Classify
13
18
1
glue :: [[Char]] -> [[Char]]


GHC.Base..
Language.Haskell.HsColour.Classify
13
23
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
13
25
1
chunk :: String -> [String]


GHC.Base.$
Language.Haskell.HsColour.Classify
13
31
1
($) :: (a -> b) -> a -> b


str
Language.Haskell.HsColour.Classify
13
33
1
str :: String


Language.Haskell.HsColour.Classify.markDefs
Language.Haskell.HsColour.Classify
14
8
1
markDefs :: [(TokenType, String)] -> [(TokenType, String)]


GHC.Base.$
Language.Haskell.HsColour.Classify
14
17
1
($) :: (a -> b) -> a -> b


GHC.Base.map
Language.Haskell.HsColour.Classify
14
19
1
map :: (a -> b) -> [a] -> [b]


s
Language.Haskell.HsColour.Classify
14
25
1
s :: String


Language.Haskell.HsColour.Classify.classify
Language.Haskell.HsColour.Classify
14
30
1
classify :: String -> TokenType


s
Language.Haskell.HsColour.Classify
14
39
1
s :: String


s
Language.Haskell.HsColour.Classify
14
41
1
s :: String


chunks
Language.Haskell.HsColour.Classify
14
45
1
chunks :: [[Char]]


Language.Haskell.HsColour.Classify.markDefs
Language.Haskell.HsColour.Classify
17
1
1
markDefs :: [(TokenType, String)] -> [(TokenType, String)]


GHC.Types.[]
Language.Haskell.HsColour.Classify
17
15
1
[] :: [a]


s
Language.Haskell.HsColour.Classify
18
19
1
s :: String


rest
Language.Haskell.HsColour.Classify
18
24
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.Definition
Language.Haskell.HsColour.Classify
18
33
1
Definition :: TokenType


s
Language.Haskell.HsColour.Classify
18
45
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
18
48
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.continue
Language.Haskell.HsColour.Classify
18
50
1
continue :: [(TokenType, [Char])] -> [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Classify
18
59
1
rest :: [(TokenType, String)]


d
Language.Haskell.HsColour.Classify
19
49
1
d :: String


rest
Language.Haskell.HsColour.Classify
19
54
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.Varop
Language.Haskell.HsColour.Classify
20
6
1
Varop :: TokenType


GHC.Types.:
Language.Haskell.HsColour.Classify
20
18
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
20
21
1
Space :: TokenType


GHC.Types.:
Language.Haskell.HsColour.Classify
20
33
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.Definition
Language.Haskell.HsColour.Classify
20
36
1
Definition :: TokenType


d
Language.Haskell.HsColour.Classify
20
48
1
d :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
20
51
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.continue
Language.Haskell.HsColour.Classify
20
53
1
continue :: [(TokenType, [Char])] -> [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Classify
20
62
1
rest :: [(TokenType, String)]


rest
Language.Haskell.HsColour.Classify
21
10
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.continue
Language.Haskell.HsColour.Classify
21
17
1
continue :: [(TokenType, [Char])] -> [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Classify
21
26
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.continue
Language.Haskell.HsColour.Classify
23
1
1
continue :: [(TokenType, [Char])] -> [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Classify
23
10
1
rest :: [(TokenType, [Char])]


thisLine
Language.Haskell.HsColour.Classify
24
12
1
thisLine :: [(TokenType, [Char])]


nextLine
Language.Haskell.HsColour.Classify
24
22
1
nextLine :: [(TokenType, [Char])]


GHC.List.span
Language.Haskell.HsColour.Classify
24
34
1
span :: (a -> Bool) -> [a] -> ([a], [a])


GHC.Classes./=
Language.Haskell.HsColour.Classify
24
40
1
(/=) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
24
44
1
Space :: TokenType


rest
Language.Haskell.HsColour.Classify
24
58
1
rest :: [(TokenType, String)]


nextLine
Language.Haskell.HsColour.Classify
26
14
1
nextLine :: [(TokenType, [Char])]


thisLine
Language.Haskell.HsColour.Classify
27
17
1
thisLine :: [(TokenType, [Char])]


nextLine'
Language.Haskell.HsColour.Classify
28
26
1
nextLine' :: [(TokenType, [Char])]


thisLine
Language.Haskell.HsColour.Classify
28
41
1
thisLine :: [(TokenType, [Char])]


GHC.Base.++
Language.Haskell.HsColour.Classify
28
50
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
28
55
1
Space :: TokenType


GHC.Types.:
Language.Haskell.HsColour.Classify
28
68
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.markDefs
Language.Haskell.HsColour.Classify
28
71
1
markDefs :: [(TokenType, String)] -> [(TokenType, String)]


nextLine'
Language.Haskell.HsColour.Classify
28
80
1
nextLine' :: [(TokenType, [Char])]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
33
1
1
chunk :: String -> [String]


GHC.Types.[]
Language.Haskell.HsColour.Classify
33
15
1
[] :: [a]


s
Language.Haskell.HsColour.Classify
34
13
1
s :: [Char]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
34
18
1
chunk :: String -> [String]


s
Language.Haskell.HsColour.Classify
34
24
1
s :: String


s
Language.Haskell.HsColour.Classify
35
13
1
s :: [Char]


GHC.Types.:
Language.Haskell.HsColour.Classify
35
22
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
35
24
1
chunk :: String -> [String]


s
Language.Haskell.HsColour.Classify
35
30
1
s :: String


c
Language.Haskell.HsColour.Classify
36
8
1
c :: Char


s
Language.Haskell.HsColour.Classify
36
10
1
s :: [Char]


Language.Haskell.HsColour.Classify.isLinearSpace
Language.Haskell.HsColour.Classify
36
15
1
isLinearSpace :: Char -> Bool


c
Language.Haskell.HsColour.Classify
36
29
1
c :: Char


c
Language.Haskell.HsColour.Classify
37
16
1
c :: Char


GHC.Types.:
Language.Haskell.HsColour.Classify
37
17
1
(:) :: a -> [a] -> [a]


ss
Language.Haskell.HsColour.Classify
37
18
1
ss :: [Char]


GHC.Types.:
Language.Haskell.HsColour.Classify
37
21
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
37
23
1
chunk :: String -> [String]


rest
Language.Haskell.HsColour.Classify
37
29
1
rest :: [(TokenType, String)]


ss
Language.Haskell.HsColour.Classify
37
41
1
ss :: [Char]


rest
Language.Haskell.HsColour.Classify
37
44
1
rest :: [Char]


GHC.List.span
Language.Haskell.HsColour.Classify
37
52
1
span :: (a -> Bool) -> [a] -> ([a], [a])


Language.Haskell.HsColour.Classify.isLinearSpace
Language.Haskell.HsColour.Classify
37
57
1
isLinearSpace :: Char -> Bool


s
Language.Haskell.HsColour.Classify
37
71
1
s :: String


s
Language.Haskell.HsColour.Classify
38
16
1
s :: [Char]


com
Language.Haskell.HsColour.Classify
38
26
1
com :: String


s'
Language.Haskell.HsColour.Classify
38
30
1
s' :: String


Language.Haskell.HsColour.Classify.nestcomment
Language.Haskell.HsColour.Classify
38
36
1
nestcomment :: Int -> String -> (String, String)


s
Language.Haskell.HsColour.Classify
38
50
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
39
28
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.Classify
39
32
1
(:) :: a -> [a] -> [a]


com
Language.Haskell.HsColour.Classify
39
33
1
com :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
39
38
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
39
40
1
chunk :: String -> [String]


s'
Language.Haskell.HsColour.Classify
39
46
1
s' :: String


s
Language.Haskell.HsColour.Classify
40
7
1
s :: String


GHC.Read.lex
Language.Haskell.HsColour.Classify
40
16
1
lex :: ReadS String


s
Language.Haskell.HsColour.Classify
40
28
1
s :: String


GHC.List.head
Language.Haskell.HsColour.Classify
41
34
1
head :: [a] -> a


s
Language.Haskell.HsColour.Classify
41
39
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
41
41
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
41
43
1
chunk :: String -> [String]


GHC.List.tail
Language.Haskell.HsColour.Classify
41
50
1
tail :: [a] -> [a]


s
Language.Haskell.HsColour.Classify
41
55
1
s :: String


tok
Language.Haskell.HsColour.Classify
42
17
1
tok :: String


rest
Language.Haskell.HsColour.Classify
42
33
1
rest :: String


GHC.List.all
Language.Haskell.HsColour.Classify
43
21
1
all :: (a -> Bool) -> [a] -> Bool


GHC.Classes.==
Language.Haskell.HsColour.Classify
43
26
1
(==) :: Eq a => a -> a -> Bool


tok
Language.Haskell.HsColour.Classify
43
33
1
tok :: String


tok
Language.Haskell.HsColour.Classify
43
41
1
tok :: String


GHC.Base.++
Language.Haskell.HsColour.Classify
43
44
1
(++) :: [a] -> [a] -> [a]


com
Language.Haskell.HsColour.Classify
43
46
1
com :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
43
50
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
43
52
1
chunk :: String -> [String]


s'
Language.Haskell.HsColour.Classify
43
58
1
s' :: String


com
Language.Haskell.HsColour.Classify
44
47
1
com :: String


s'
Language.Haskell.HsColour.Classify
44
51
1
s' :: String


Language.Haskell.HsColour.Classify.eolcomment
Language.Haskell.HsColour.Classify
44
57
1
eolcomment :: String -> (String, String)


rest
Language.Haskell.HsColour.Classify
44
68
1
rest :: [(TokenType, String)]


tok
Language.Haskell.HsColour.Classify
45
17
1
tok :: String


rest
Language.Haskell.HsColour.Classify
45
21
1
rest :: String


tok
Language.Haskell.HsColour.Classify
45
33
1
tok :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
45
36
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Classify.chunk
Language.Haskell.HsColour.Classify
45
38
1
chunk :: String -> [String]


rest
Language.Haskell.HsColour.Classify
45
44
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.isLinearSpace
Language.Haskell.HsColour.Classify
47
1
1
isLinearSpace :: Char -> Bool


c
Language.Haskell.HsColour.Classify
47
15
1
c :: Char


c
Language.Haskell.HsColour.Classify
47
19
1
c :: Char


GHC.List.elem
Language.Haskell.HsColour.Classify
47
21
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.glue
Language.Haskell.HsColour.Classify
52
1
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
52
11
1
rest :: [[Char]]


glue
Language.Haskell.HsColour.Classify
53
8
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
53
13
1
rest :: [(TokenType, String)]


qn
Language.Haskell.HsColour.Classify
54
6
1
qn :: [Char]


rest
Language.Haskell.HsColour.Classify
54
13
1
rest :: [[Char]]


GHC.Base.++
Language.Haskell.HsColour.Classify
54
26
1
(++) :: [a] -> [a] -> [a]


qn
Language.Haskell.HsColour.Classify
54
28
1
qn :: [Char]


GHC.Base.++
Language.Haskell.HsColour.Classify
54
30
1
(++) :: [a] -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.Classify
54
36
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
54
38
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
54
43
1
rest :: [(TokenType, String)]


GHC.Types.:
Language.Haskell.HsColour.Classify
55
25
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
55
27
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
55
32
1
rest :: [(TokenType, String)]


s
Language.Haskell.HsColour.Classify
56
7
1
s :: [Char]


ss
Language.Haskell.HsColour.Classify
56
9
1
ss :: [[Char]]


GHC.List.all
Language.Haskell.HsColour.Classify
56
21
1
all :: (a -> Bool) -> [a] -> Bool


GHC.Classes.==
Language.Haskell.HsColour.Classify
56
26
1
(==) :: Eq a => a -> a -> Bool


s
Language.Haskell.HsColour.Classify
56
33
1
s :: String


GHC.Classes.&&
Language.Haskell.HsColour.Classify
56
35
1
(&&) :: Bool -> Bool -> Bool


GHC.List.length
Language.Haskell.HsColour.Classify
56
38
1
length :: [a] -> Int


s
Language.Haskell.HsColour.Classify
56
45
1
s :: String


GHC.Classes.>=
Language.Haskell.HsColour.Classify
56
47
1
(>=) :: Ord a => a -> a -> Bool


s
Language.Haskell.HsColour.Classify
57
22
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.Classify
57
23
1
(++) :: [a] -> [a] -> [a]


GHC.List.concat
Language.Haskell.HsColour.Classify
57
25
1
concat :: [[a]] -> [a]


c
Language.Haskell.HsColour.Classify
57
32
1
c :: Char


GHC.Types.:
Language.Haskell.HsColour.Classify
57
34
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
57
36
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
57
41
1
rest :: [(TokenType, String)]


c
Language.Haskell.HsColour.Classify
58
26
1
c :: [[Char]]


rest
Language.Haskell.HsColour.Classify
58
28
1
rest :: [[Char]]


GHC.List.break
Language.Haskell.HsColour.Classify
58
36
1
break :: (a -> Bool) -> [a] -> ([a], [a])


GHC.List.elem
Language.Haskell.HsColour.Classify
58
47
1
elem :: Eq a => a -> [a] -> Bool


ss
Language.Haskell.HsColour.Classify
58
55
1
ss :: [Char]


ss
Language.Haskell.HsColour.Classify
61
11
1
ss :: [[Char]]


rest
Language.Haskell.HsColour.Classify
61
22
1
rest :: [(TokenType, String)]


rest
Language.Haskell.HsColour.Classify
62
21
1
rest :: [[Char]]


GHC.Base.++
Language.Haskell.HsColour.Classify
62
34
1
(++) :: [a] -> [a] -> [a]


GHC.List.concat
Language.Haskell.HsColour.Classify
62
37
1
concat :: [[a]] -> [a]


tuple
Language.Haskell.HsColour.Classify
62
44
1
tuple :: [[Char]]


GHC.Base.++
Language.Haskell.HsColour.Classify
62
50
1
(++) :: [a] -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.Classify
62
58
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
62
60
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
62
65
1
rest :: [(TokenType, String)]


GHC.Types.:
Language.Haskell.HsColour.Classify
63
34
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
63
36
1
glue :: [[Char]] -> [[Char]]


ss
Language.Haskell.HsColour.Classify
63
41
1
ss :: [Char]


tuple
Language.Haskell.HsColour.Classify
64
22
1
tuple :: [[Char]]


rest
Language.Haskell.HsColour.Classify
64
28
1
rest :: [[Char]]


GHC.List.span
Language.Haskell.HsColour.Classify
64
36
1
span :: (a -> Bool) -> [a] -> ([a], [a])


GHC.Classes.==
Language.Haskell.HsColour.Classify
64
42
1
(==) :: Eq a => a -> a -> Bool


ss
Language.Haskell.HsColour.Classify
64
49
1
ss :: [Char]


ss
Language.Haskell.HsColour.Classify
65
15
1
ss :: [[Char]]


GHC.Types.:
Language.Haskell.HsColour.Classify
65
26
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
65
28
1
glue :: [[Char]] -> [[Char]]


ss
Language.Haskell.HsColour.Classify
65
33
1
ss :: [Char]


ss
Language.Haskell.HsColour.Classify
66
16
1
ss :: [[Char]]


GHC.Types.:
Language.Haskell.HsColour.Classify
66
26
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.Classify
66
32
1
(:) :: a -> [a] -> [a]


GHC.List.concat
Language.Haskell.HsColour.Classify
66
33
1
concat :: [[a]] -> [a]


line
Language.Haskell.HsColour.Classify
66
40
1
line :: [[Char]]


GHC.Types.:
Language.Haskell.HsColour.Classify
66
46
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
66
48
1
glue :: [[Char]] -> [[Char]]


rest
Language.Haskell.HsColour.Classify
66
53
1
rest :: [(TokenType, String)]


line
Language.Haskell.HsColour.Classify
67
26
1
line :: [[Char]]


rest
Language.Haskell.HsColour.Classify
67
31
1
rest :: [[Char]]


GHC.List.break
Language.Haskell.HsColour.Classify
67
39
1
break :: (a -> Bool) -> [a] -> ([a], [a])


GHC.List.elem
Language.Haskell.HsColour.Classify
67
50
1
elem :: Eq a => a -> [a] -> Bool


ss
Language.Haskell.HsColour.Classify
67
58
1
ss :: [Char]


s
Language.Haskell.HsColour.Classify
68
7
1
s :: [Char]


ss
Language.Haskell.HsColour.Classify
68
9
1
ss :: [[Char]]


s
Language.Haskell.HsColour.Classify
68
21
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
68
22
1
(:) :: a -> [a] -> [a]


glue
Language.Haskell.HsColour.Classify
68
24
1
glue :: [[Char]] -> [[Char]]


ss
Language.Haskell.HsColour.Classify
68
29
1
ss :: [Char]


GHC.Types.[]
Language.Haskell.HsColour.Classify
69
21
1
[] :: [a]


Language.Haskell.HsColour.Classify.nestcomment
Language.Haskell.HsColour.Classify
73
1
1
nestcomment :: Int -> String -> (String, String)


n
Language.Haskell.HsColour.Classify
73
13
1
n :: Int


ss
Language.Haskell.HsColour.Classify
73
24
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
73
30
1
n :: Int


GHC.Classes.>=
Language.Haskell.HsColour.Classify
73
31
1
(>=) :: Ord a => a -> a -> Bool


GHC.Base.++
Language.Haskell.HsColour.Classify
73
43
1
(++) :: [a] -> [a] -> [a]


cs
Language.Haskell.HsColour.Classify
73
45
1
cs :: String


rm
Language.Haskell.HsColour.Classify
73
49
1
rm :: String


cs
Language.Haskell.HsColour.Classify
74
42
1
cs :: String


rm
Language.Haskell.HsColour.Classify
74
45
1
rm :: String


Language.Haskell.HsColour.Classify.nestcomment
Language.Haskell.HsColour.Classify
74
51
1
nestcomment :: Int -> String -> (String, String)


n
Language.Haskell.HsColour.Classify
74
64
1
n :: Int


GHC.Num.+
Language.Haskell.HsColour.Classify
74
65
1
(+) :: Num a => a -> a -> a


ss
Language.Haskell.HsColour.Classify
74
69
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
75
13
1
n :: Int


ss
Language.Haskell.HsColour.Classify
75
24
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
75
30
1
n :: Int


GHC.Classes.>
Language.Haskell.HsColour.Classify
75
31
1
(>) :: Ord a => a -> a -> Bool


GHC.Base.++
Language.Haskell.HsColour.Classify
75
43
1
(++) :: [a] -> [a] -> [a]


cs
Language.Haskell.HsColour.Classify
75
45
1
cs :: String


rm
Language.Haskell.HsColour.Classify
75
49
1
rm :: String


cs
Language.Haskell.HsColour.Classify
76
42
1
cs :: String


rm
Language.Haskell.HsColour.Classify
76
45
1
rm :: String


Language.Haskell.HsColour.Classify.nestcomment
Language.Haskell.HsColour.Classify
76
51
1
nestcomment :: Int -> String -> (String, String)


n
Language.Haskell.HsColour.Classify
76
64
1
n :: Int


GHC.Num.-
Language.Haskell.HsColour.Classify
76
65
1
(-) :: Num a => a -> a -> a


ss
Language.Haskell.HsColour.Classify
76
69
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
77
13
1
n :: Int


ss
Language.Haskell.HsColour.Classify
77
24
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
77
30
1
n :: Int


GHC.Classes.==
Language.Haskell.HsColour.Classify
77
31
1
(==) :: Eq a => a -> a -> Bool


ss
Language.Haskell.HsColour.Classify
77
43
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
78
13
1
n :: Int


s
Language.Haskell.HsColour.Classify
78
16
1
s :: Char


ss
Language.Haskell.HsColour.Classify
78
18
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
78
30
1
n :: Int


GHC.Classes.>=
Language.Haskell.HsColour.Classify
78
31
1
(>=) :: Ord a => a -> a -> Bool


s
Language.Haskell.HsColour.Classify
78
39
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.Classify
78
40
1
(:) :: a -> [a] -> [a]


cs
Language.Haskell.HsColour.Classify
78
41
1
cs :: String


rm
Language.Haskell.HsColour.Classify
78
45
1
rm :: String


cs
Language.Haskell.HsColour.Classify
79
42
1
cs :: String


rm
Language.Haskell.HsColour.Classify
79
45
1
rm :: String


Language.Haskell.HsColour.Classify.nestcomment
Language.Haskell.HsColour.Classify
79
51
1
nestcomment :: Int -> String -> (String, String)


n
Language.Haskell.HsColour.Classify
79
63
1
n :: Int


ss
Language.Haskell.HsColour.Classify
79
65
1
ss :: [Char]


n
Language.Haskell.HsColour.Classify
80
13
1
n :: Int


GHC.Types.[]
Language.Haskell.HsColour.Classify
80
21
1
[] :: [a]


GHC.Types.[]
Language.Haskell.HsColour.Classify
80
24
1
[] :: [a]


Language.Haskell.HsColour.Classify.eolcomment
Language.Haskell.HsColour.Classify
83
1
1
eolcomment :: String -> (String, String)


s
Language.Haskell.HsColour.Classify
83
12
1
s :: String


GHC.Types.[]
Language.Haskell.HsColour.Classify
83
26
1
[] :: [a]


s
Language.Haskell.HsColour.Classify
83
30
1
s :: String


s
Language.Haskell.HsColour.Classify
84
18
1
s :: [Char]


Language.Haskell.HsColour.Classify.eolcomment
Language.Haskell.HsColour.Classify
84
25
1
eolcomment :: String -> (String, String)


s
Language.Haskell.HsColour.Classify
84
36
1
s :: String


c
Language.Haskell.HsColour.Classify
85
13
1
c :: Char


s
Language.Haskell.HsColour.Classify
85
15
1
s :: [Char]


c
Language.Haskell.HsColour.Classify
85
26
1
c :: Char


GHC.Types.:
Language.Haskell.HsColour.Classify
85
27
1
(:) :: a -> [a] -> [a]


cs
Language.Haskell.HsColour.Classify
85
28
1
cs :: String


s'
Language.Haskell.HsColour.Classify
85
32
1
s' :: String


cs
Language.Haskell.HsColour.Classify
85
43
1
cs :: String


s'
Language.Haskell.HsColour.Classify
85
46
1
s' :: String


Language.Haskell.HsColour.Classify.eolcomment
Language.Haskell.HsColour.Classify
85
52
1
eolcomment :: String -> (String, String)


s
Language.Haskell.HsColour.Classify
85
63
1
s :: String


GHC.Types.[]
Language.Haskell.HsColour.Classify
86
26
1
[] :: [a]


GHC.Types.[]
Language.Haskell.HsColour.Classify
86
29
1
[] :: [a]


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
90
3
1
Space :: TokenType


Language.Haskell.HsColour.Classify.Keyword
Language.Haskell.HsColour.Classify
90
11
1
Keyword :: TokenType


Language.Haskell.HsColour.Classify.Keyglyph
Language.Haskell.HsColour.Classify
90
21
1
Keyglyph :: TokenType


Language.Haskell.HsColour.Classify.Layout
Language.Haskell.HsColour.Classify
90
32
1
Layout :: TokenType


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.Classify
90
41
1
Comment :: TokenType


Language.Haskell.HsColour.Classify.Conid
Language.Haskell.HsColour.Classify
90
51
1
Conid :: TokenType


Language.Haskell.HsColour.Classify.Varid
Language.Haskell.HsColour.Classify
90
59
1
Varid :: TokenType


Language.Haskell.HsColour.Classify.Conop
Language.Haskell.HsColour.Classify
91
3
1
Conop :: TokenType


Language.Haskell.HsColour.Classify.Varop
Language.Haskell.HsColour.Classify
91
11
1
Varop :: TokenType


Language.Haskell.HsColour.Classify.String
Language.Haskell.HsColour.Classify
91
21
1
String :: TokenType


Language.Haskell.HsColour.Classify.Char
Language.Haskell.HsColour.Classify
91
32
1
Char :: TokenType


Language.Haskell.HsColour.Classify.Number
Language.Haskell.HsColour.Classify
91
41
1
Number :: TokenType


Language.Haskell.HsColour.Classify.Cpp
Language.Haskell.HsColour.Classify
91
51
1
Cpp :: TokenType


Language.Haskell.HsColour.Classify.Error
Language.Haskell.HsColour.Classify
91
59
1
Error :: TokenType


Language.Haskell.HsColour.Classify.Definition
Language.Haskell.HsColour.Classify
92
3
1
Definition :: TokenType


GHC.Classes.D:Eq
Language.Haskell.HsColour.Classify
93
13
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Show.D:Show
Language.Haskell.HsColour.Classify
93
16
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


Language.Haskell.HsColour.Classify.classify
Language.Haskell.HsColour.Classify
96
1
1
classify :: String -> TokenType


s
Language.Haskell.HsColour.Classify
96
10
1
s :: String


h
Language.Haskell.HsColour.Classify
96
13
1
h :: Char


t
Language.Haskell.HsColour.Classify
96
15
1
t :: [Char]


GHC.Unicode.isSpace
Language.Haskell.HsColour.Classify
97
7
1
isSpace :: Char -> Bool


h
Language.Haskell.HsColour.Classify
97
15
1
h :: Char


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
97
32
1
Space :: TokenType


GHC.List.all
Language.Haskell.HsColour.Classify
98
7
1
all :: (a -> Bool) -> [a] -> Bool


GHC.Classes.==
Language.Haskell.HsColour.Classify
98
12
1
(==) :: Eq a => a -> a -> Bool


s
Language.Haskell.HsColour.Classify
98
19
1
s :: String


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.Classify
98
32
1
Comment :: TokenType


Data.List.isPrefixOf
Language.Haskell.HsColour.Classify
99
12
1
isPrefixOf :: Eq a => [a] -> [a] -> Bool


s
Language.Haskell.HsColour.Classify
99
25
1
s :: String


GHC.Classes.&&
Language.Haskell.HsColour.Classify
100
7
1
(&&) :: Bool -> Bool -> Bool


GHC.List.any
Language.Haskell.HsColour.Classify
100
10
1
any :: (a -> Bool) -> [a] -> Bool


GHC.Unicode.isSpace
Language.Haskell.HsColour.Classify
100
14
1
isSpace :: Char -> Bool


s
Language.Haskell.HsColour.Classify
100
22
1
s :: String


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.Classify
100
32
1
Comment :: TokenType


Data.List.isPrefixOf
Language.Haskell.HsColour.Classify
101
12
1
isPrefixOf :: Eq a => [a] -> [a] -> Bool


s
Language.Haskell.HsColour.Classify
101
25
1
s :: String


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.Classify
101
32
1
Comment :: TokenType


s
Language.Haskell.HsColour.Classify
102
7
1
s :: String


GHC.List.elem
Language.Haskell.HsColour.Classify
102
9
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.keywords
Language.Haskell.HsColour.Classify
102
16
1
keywords :: [[Char]]


Language.Haskell.HsColour.Classify.Keyword
Language.Haskell.HsColour.Classify
102
32
1
Keyword :: TokenType


s
Language.Haskell.HsColour.Classify
103
7
1
s :: String


GHC.List.elem
Language.Haskell.HsColour.Classify
103
9
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.keyglyphs
Language.Haskell.HsColour.Classify
103
16
1
keyglyphs :: [[Char]]


Language.Haskell.HsColour.Classify.Keyglyph
Language.Haskell.HsColour.Classify
103
32
1
Keyglyph :: TokenType


s
Language.Haskell.HsColour.Classify
104
7
1
s :: String


GHC.List.elem
Language.Haskell.HsColour.Classify
104
9
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.layoutchars
Language.Haskell.HsColour.Classify
104
16
1
layoutchars :: [[Char]]


Language.Haskell.HsColour.Classify.Layout
Language.Haskell.HsColour.Classify
104
32
1
Layout :: TokenType


GHC.Unicode.isUpper
Language.Haskell.HsColour.Classify
105
7
1
isUpper :: Char -> Bool


h
Language.Haskell.HsColour.Classify
105
15
1
h :: Char


Language.Haskell.HsColour.Classify.Conid
Language.Haskell.HsColour.Classify
105
32
1
Conid :: TokenType


s
Language.Haskell.HsColour.Classify
106
7
1
s :: String


GHC.Classes.==
Language.Haskell.HsColour.Classify
106
9
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Conid
Language.Haskell.HsColour.Classify
106
32
1
Conid :: TokenType


h
Language.Haskell.HsColour.Classify
107
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
107
9
1
(==) :: Eq a => a -> a -> Bool


GHC.Classes.&&
Language.Haskell.HsColour.Classify
107
16
1
(&&) :: Bool -> Bool -> Bool


Language.Haskell.HsColour.Classify.isTupleTail
Language.Haskell.HsColour.Classify
107
19
1
isTupleTail :: [Char] -> Bool


t
Language.Haskell.HsColour.Classify
107
31
1
t :: [Char]


Language.Haskell.HsColour.Classify.Conid
Language.Haskell.HsColour.Classify
107
35
1
Conid :: TokenType


h
Language.Haskell.HsColour.Classify
108
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
108
9
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Cpp
Language.Haskell.HsColour.Classify
108
32
1
Cpp :: TokenType


GHC.Unicode.isLower
Language.Haskell.HsColour.Classify
109
7
1
isLower :: Char -> Bool


h
Language.Haskell.HsColour.Classify
109
15
1
h :: Char


Language.Haskell.HsColour.Classify.Varid
Language.Haskell.HsColour.Classify
109
32
1
Varid :: TokenType


h
Language.Haskell.HsColour.Classify
110
7
1
h :: Char


GHC.List.elem
Language.Haskell.HsColour.Classify
110
9
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.symbols
Language.Haskell.HsColour.Classify
110
16
1
symbols :: [Char]


Language.Haskell.HsColour.Classify.Varop
Language.Haskell.HsColour.Classify
110
32
1
Varop :: TokenType


h
Language.Haskell.HsColour.Classify
111
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
111
8
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Conop
Language.Haskell.HsColour.Classify
111
32
1
Conop :: TokenType


h
Language.Haskell.HsColour.Classify
112
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
112
8
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Varop
Language.Haskell.HsColour.Classify
112
32
1
Varop :: TokenType


h
Language.Haskell.HsColour.Classify
113
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
113
8
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.String
Language.Haskell.HsColour.Classify
113
32
1
String :: TokenType


h
Language.Haskell.HsColour.Classify
114
7
1
h :: Char


GHC.Classes.==
Language.Haskell.HsColour.Classify
114
8
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Char
Language.Haskell.HsColour.Classify
114
32
1
Char :: TokenType


GHC.Unicode.isDigit
Language.Haskell.HsColour.Classify
115
7
1
isDigit :: Char -> Bool


h
Language.Haskell.HsColour.Classify
115
15
1
h :: Char


Language.Haskell.HsColour.Classify.Number
Language.Haskell.HsColour.Classify
115
32
1
Number :: TokenType


GHC.Base.otherwise
Language.Haskell.HsColour.Classify
116
7
1
otherwise :: Bool


Language.Haskell.HsColour.Classify.Error
Language.Haskell.HsColour.Classify
116
32
1
Error :: TokenType


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.Classify
117
14
1
Space :: TokenType


Language.Haskell.HsColour.Classify.isTupleTail
Language.Haskell.HsColour.Classify
119
1
1
isTupleTail :: [Char] -> Bool


GHC.Bool.True
Language.Haskell.HsColour.Classify
119
21
1
True :: Bool


xs
Language.Haskell.HsColour.Classify
120
18
1
xs :: [Char]


isTupleTail
Language.Haskell.HsColour.Classify
120
24
1
isTupleTail :: [Char] -> Bool


xs
Language.Haskell.HsColour.Classify
120
36
1
xs :: [Char]


GHC.Bool.False
Language.Haskell.HsColour.Classify
121
17
1
False :: Bool


Language.Haskell.HsColour.Classify.keywords
Language.Haskell.HsColour.Classify
125
1
1
keywords :: [[Char]]


Language.Haskell.HsColour.Classify.keyglyphs
Language.Haskell.HsColour.Classify
130
1
1
keyglyphs :: [[Char]]


Language.Haskell.HsColour.Classify.layoutchars
Language.Haskell.HsColour.Classify
132
1
1
layoutchars :: [[Char]]


GHC.Base.map
Language.Haskell.HsColour.Classify
133
3
1
map :: (a -> b) -> [a] -> [b]


GHC.Types.:
Language.Haskell.HsColour.Classify
133
8
1
(:) :: a -> [a] -> [a]


GHC.Types.[]
Language.Haskell.HsColour.Classify
133
9
1
[] :: [a]


Language.Haskell.HsColour.Classify.symbols
Language.Haskell.HsColour.Classify
134
1
1
symbols :: [Char]




Language.Haskell.HsColour.Anchors.insertAnchors
Language.Haskell.HsColour.Anchors
27
1
2
insertAnchors ::
  [(TokenType, String)] -> [Either Anchor (TokenType, String)]


Language.Haskell.HsColour.Anchors.anchor
Language.Haskell.HsColour.Anchors
27
17
2
anchor ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


Language.Haskell.HsColour.Anchors.emptyST
Language.Haskell.HsColour.Anchors
27
24
1
emptyST :: ST


Language.Haskell.HsColour.Anchors.anchor
Language.Haskell.HsColour.Anchors
32
1
2
anchor ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


st
Language.Haskell.HsColour.Anchors
32
8
1
st :: ST


s
Language.Haskell.HsColour.Anchors
32
11
1
s :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.identifier
Language.Haskell.HsColour.Anchors
32
20
1
identifier :: ST -> [(TokenType, String)] -> Maybe String


st
Language.Haskell.HsColour.Anchors
32
31
1
st :: ST


s
Language.Haskell.HsColour.Anchors
32
34
1
s :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.emit
Language.Haskell.HsColour.Anchors
33
28
2
emit ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


st
Language.Haskell.HsColour.Anchors
33
33
1
st :: ST


s
Language.Haskell.HsColour.Anchors
33
36
1
s :: [(TokenType, String)]


v
Language.Haskell.HsColour.Anchors
34
22
1
v :: String


Data.Either.Left
Language.Haskell.HsColour.Anchors
34
28
1
Left :: a -> Either a b


Language.Haskell.HsColour.Anchors.escape
Language.Haskell.HsColour.Anchors
34
34
1
escape :: String -> String


v
Language.Haskell.HsColour.Anchors
34
41
1
v :: String


GHC.Types.:
Language.Haskell.HsColour.Anchors
34
43
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Anchors.emit
Language.Haskell.HsColour.Anchors
34
45
2
emit ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


Language.Haskell.HsColour.Anchors.insertST
Language.Haskell.HsColour.Anchors
34
51
1
insertST :: String -> ST -> ST


v
Language.Haskell.HsColour.Anchors
34
60
1
v :: String


st
Language.Haskell.HsColour.Anchors
34
62
1
st :: ST


s
Language.Haskell.HsColour.Anchors
34
66
1
s :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.escape
Language.Haskell.HsColour.Anchors
40
1
1
escape :: String -> String


GHC.List.concatMap
Language.Haskell.HsColour.Anchors
40
10
1
concatMap :: (a -> [b]) -> [a] -> [b]


enc
Language.Haskell.HsColour.Anchors
40
20
1
enc :: Char -> [Char]


enc
Language.Haskell.HsColour.Anchors
41
11
1
enc :: Char -> [Char]


x
Language.Haskell.HsColour.Anchors
41
15
1
x :: Char


GHC.Unicode.isDigit
Language.Haskell.HsColour.Anchors
41
19
1
isDigit :: Char -> Bool


x
Language.Haskell.HsColour.Anchors
41
27
1
x :: Char


GHC.Classes.||
Language.Haskell.HsColour.Anchors
42
17
1
(||) :: Bool -> Bool -> Bool


isURIFragmentValid
Language.Haskell.HsColour.Anchors
42
20
1
isURIFragmentValid :: Char -> Bool


x
Language.Haskell.HsColour.Anchors
42
39
1
x :: Char


GHC.Classes.||
Language.Haskell.HsColour.Anchors
43
17
1
(||) :: Bool -> Bool -> Bool


GHC.Unicode.isLower
Language.Haskell.HsColour.Anchors
43
20
1
isLower :: Char -> Bool


x
Language.Haskell.HsColour.Anchors
43
28
1
x :: Char


GHC.Classes.||
Language.Haskell.HsColour.Anchors
44
17
1
(||) :: Bool -> Bool -> Bool


GHC.Unicode.isUpper
Language.Haskell.HsColour.Anchors
44
20
1
isUpper :: Char -> Bool


x
Language.Haskell.HsColour.Anchors
44
28
1
x :: Char


x
Language.Haskell.HsColour.Anchors
44
33
1
x :: Char


GHC.Base.otherwise
Language.Haskell.HsColour.Anchors
45
19
1
otherwise :: Bool


hexHi
Language.Haskell.HsColour.Anchors
45
37
1
hexHi :: Int -> Char


GHC.Base.ord
Language.Haskell.HsColour.Anchors
45
44
1
ord :: Char -> Int


x
Language.Haskell.HsColour.Anchors
45
48
1
x :: Char


hexLo
Language.Haskell.HsColour.Anchors
45
52
1
hexLo :: Int -> Char


GHC.Base.ord
Language.Haskell.HsColour.Anchors
45
59
1
ord :: Char -> Int


x
Language.Haskell.HsColour.Anchors
45
63
1
x :: Char


hexHi
Language.Haskell.HsColour.Anchors
46
11
1
hexHi :: Int -> Char


d
Language.Haskell.HsColour.Anchors
46
17
1
d :: Int


GHC.Show.intToDigit
Language.Haskell.HsColour.Anchors
46
21
1
intToDigit :: Int -> Char


d
Language.Haskell.HsColour.Anchors
46
33
1
d :: Int


GHC.Real.div
Language.Haskell.HsColour.Anchors
46
34
1
div :: Integral a => a -> a -> a


hexLo
Language.Haskell.HsColour.Anchors
47
11
1
hexLo :: Int -> Char


d
Language.Haskell.HsColour.Anchors
47
17
1
d :: Int


GHC.Show.intToDigit
Language.Haskell.HsColour.Anchors
47
21
1
intToDigit :: Int -> Char


d
Language.Haskell.HsColour.Anchors
47
33
1
d :: Int


GHC.Real.mod
Language.Haskell.HsColour.Anchors
47
34
1
mod :: Integral a => a -> a -> a


isURIFragmentValid
Language.Haskell.HsColour.Anchors
48
11
1
isURIFragmentValid :: Char -> Bool


x
Language.Haskell.HsColour.Anchors
48
30
1
x :: Char


x
Language.Haskell.HsColour.Anchors
48
34
1
x :: Char


GHC.List.elem
Language.Haskell.HsColour.Anchors
48
36
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Anchors.emit
Language.Haskell.HsColour.Anchors
54
1
2
emit ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


st
Language.Haskell.HsColour.Anchors
54
6
1
st :: ST


t
Language.Haskell.HsColour.Anchors
54
10
1
t :: (TokenType, String)


stream
Language.Haskell.HsColour.Anchors
54
25
1
stream :: [(TokenType, String)]


Data.Either.Right
Language.Haskell.HsColour.Anchors
54
35
1
Right :: b -> Either a b


t
Language.Haskell.HsColour.Anchors
54
41
1
t :: (TokenType, String)


GHC.Types.:
Language.Haskell.HsColour.Anchors
54
42
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Anchors.anchor
Language.Haskell.HsColour.Anchors
54
44
2
anchor ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


st
Language.Haskell.HsColour.Anchors
54
51
1
st :: ST


stream
Language.Haskell.HsColour.Anchors
54
54
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
55
6
1
st :: ST


t
Language.Haskell.HsColour.Anchors
55
10
1
t :: (TokenType, String)


stream
Language.Haskell.HsColour.Anchors
55
12
1
stream :: [(TokenType, String)]


Data.Either.Right
Language.Haskell.HsColour.Anchors
55
35
1
Right :: b -> Either a b


t
Language.Haskell.HsColour.Anchors
55
41
1
t :: (TokenType, String)


GHC.Types.:
Language.Haskell.HsColour.Anchors
55
42
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.Anchors.emit
Language.Haskell.HsColour.Anchors
55
44
2
emit ::
  ST -> [(TokenType, String)] -> [Either String (TokenType, String)]


st
Language.Haskell.HsColour.Anchors
55
49
1
st :: ST


stream
Language.Haskell.HsColour.Anchors
55
52
1
stream :: [(TokenType, String)]


GHC.Types.[]
Language.Haskell.HsColour.Anchors
56
35
1
[] :: [a]


Language.Haskell.HsColour.Anchors.identifier
Language.Haskell.HsColour.Anchors
62
1
1
identifier :: ST -> [(TokenType, String)] -> Maybe String


st
Language.Haskell.HsColour.Anchors
62
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
62
15
1
t :: [(TokenType, String)]


kind
Language.Haskell.HsColour.Anchors
62
19
1
kind :: TokenType


v
Language.Haskell.HsColour.Anchors
62
24
1
v :: String


stream
Language.Haskell.HsColour.Anchors
62
27
1
stream :: [(TokenType, String)]


kind
Language.Haskell.HsColour.Anchors
62
37
1
kind :: TokenType


GHC.List.elem
Language.Haskell.HsColour.Anchors
62
41
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.Classify.Varid
Language.Haskell.HsColour.Anchors
62
48
1
Varid :: TokenType


Language.Haskell.HsColour.Classify.Definition
Language.Haskell.HsColour.Anchors
62
54
1
Definition :: TokenType


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
63
10
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
63
15
1
stream :: [(TokenType, String)]


v
Language.Haskell.HsColour.Anchors
64
17
1
v :: String


GHC.Classes.not
Language.Haskell.HsColour.Anchors
64
25
1
not :: Bool -> Bool


v
Language.Haskell.HsColour.Anchors
64
30
1
v :: String


Language.Haskell.HsColour.Anchors.inST
Language.Haskell.HsColour.Anchors
64
31
1
inST :: String -> ST -> Bool


st
Language.Haskell.HsColour.Anchors
64
37
1
st :: ST


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
64
44
1
Just :: a -> Maybe a


Language.Haskell.HsColour.Anchors.fix
Language.Haskell.HsColour.Anchors
64
50
1
fix :: String -> String


v
Language.Haskell.HsColour.Anchors
64
54
1
v :: String


notVarop
Language.Haskell.HsColour.Anchors
65
9
1
notVarop :: [(TokenType, String)]


v
Language.Haskell.HsColour.Anchors
66
25
1
v :: String


Language.Haskell.HsColour.Anchors.inST
Language.Haskell.HsColour.Anchors
66
27
1
inST :: String -> ST -> Bool


st
Language.Haskell.HsColour.Anchors
66
34
1
st :: ST


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
66
44
1
Nothing :: Maybe a


GHC.Base.otherwise
Language.Haskell.HsColour.Anchors
67
25
1
otherwise :: Bool


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
67
44
1
Just :: a -> Maybe a


v
Language.Haskell.HsColour.Anchors
67
49
1
v :: String


st
Language.Haskell.HsColour.Anchors
68
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
68
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
68
31
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
69
10
1
stream :: [(TokenType, String)]


v
Language.Haskell.HsColour.Anchors
70
15
1
v :: String


v
Language.Haskell.HsColour.Anchors
72
25
1
v :: String


Language.Haskell.HsColour.Anchors.inST
Language.Haskell.HsColour.Anchors
72
27
1
inST :: String -> ST -> Bool


st
Language.Haskell.HsColour.Anchors
72
34
1
st :: ST


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
72
44
1
Nothing :: Maybe a


GHC.Base.otherwise
Language.Haskell.HsColour.Anchors
73
25
1
otherwise :: Bool


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
73
44
1
Just :: a -> Maybe a


Language.Haskell.HsColour.Anchors.fix
Language.Haskell.HsColour.Anchors
73
50
1
fix :: String -> String


v
Language.Haskell.HsColour.Anchors
73
54
1
v :: String


notVarop
Language.Haskell.HsColour.Anchors
74
7
1
notVarop :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
74
24
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


Language.Haskell.HsColour.Anchors.munchParens
Language.Haskell.HsColour.Anchors
74
30
1
munchParens :: [(TokenType, String)] -> [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
74
42
1
stream :: [(TokenType, String)]


v
Language.Haskell.HsColour.Anchors
75
19
1
v :: String


GHC.Classes.not
Language.Haskell.HsColour.Anchors
75
27
1
not :: Bool -> Bool


v
Language.Haskell.HsColour.Anchors
75
32
1
v :: String


Language.Haskell.HsColour.Anchors.inST
Language.Haskell.HsColour.Anchors
75
33
1
inST :: String -> ST -> Bool


st
Language.Haskell.HsColour.Anchors
75
39
1
st :: ST


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
75
46
1
Just :: a -> Maybe a


Language.Haskell.HsColour.Anchors.fix
Language.Haskell.HsColour.Anchors
75
52
1
fix :: String -> String


v
Language.Haskell.HsColour.Anchors
75
56
1
v :: String


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
76
28
1
Nothing :: Maybe a


st
Language.Haskell.HsColour.Anchors
77
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
77
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
77
38
1
stream :: [(TokenType, String)]


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
77
48
1
Nothing :: Maybe a


st
Language.Haskell.HsColour.Anchors
78
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
78
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
78
35
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.getConid
Language.Haskell.HsColour.Anchors
78
48
1
getConid :: [(TokenType, String)] -> Maybe String


stream
Language.Haskell.HsColour.Anchors
78
57
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
79
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
79
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
79
38
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.getConid
Language.Haskell.HsColour.Anchors
79
48
1
getConid :: [(TokenType, String)] -> Maybe String


stream
Language.Haskell.HsColour.Anchors
79
57
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
80
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
80
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
80
35
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.getConid
Language.Haskell.HsColour.Anchors
80
48
1
getConid :: [(TokenType, String)] -> Maybe String


stream
Language.Haskell.HsColour.Anchors
80
57
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
81
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
81
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
81
36
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.getConid
Language.Haskell.HsColour.Anchors
81
48
1
getConid :: [(TokenType, String)] -> Maybe String


stream
Language.Haskell.HsColour.Anchors
81
57
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
82
12
1
st :: ST


t
Language.Haskell.HsColour.Anchors
82
15
1
t :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
82
43
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.identifier
Language.Haskell.HsColour.Anchors
82
53
1
identifier :: ST -> [(TokenType, String)] -> Maybe String


st
Language.Haskell.HsColour.Anchors
82
64
1
st :: ST


stream
Language.Haskell.HsColour.Anchors
82
67
1
stream :: [(TokenType, String)]


st
Language.Haskell.HsColour.Anchors
83
12
1
st :: ST


stream
Language.Haskell.HsColour.Anchors
83
15
1
stream :: [(TokenType, String)]


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
83
24
1
Nothing :: Maybe a


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
87
1
1
typesig :: [(TokenType, String)] -> Bool


GHC.Bool.True
Language.Haskell.HsColour.Anchors
87
33
1
True :: Bool


stream
Language.Haskell.HsColour.Anchors
88
20
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
88
33
1
typesig :: [(TokenType, String)] -> Bool


stream
Language.Haskell.HsColour.Anchors
88
41
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
89
46
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
89
59
1
typesig :: [(TokenType, String)] -> Bool


stream
Language.Haskell.HsColour.Anchors
89
67
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
90
23
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
90
33
1
typesig :: [(TokenType, String)] -> Bool


stream
Language.Haskell.HsColour.Anchors
90
41
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
91
20
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
91
33
1
typesig :: [(TokenType, String)] -> Bool


stream
Language.Haskell.HsColour.Anchors
91
41
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
92
22
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.typesig
Language.Haskell.HsColour.Anchors
92
33
1
typesig :: [(TokenType, String)] -> Bool


stream
Language.Haskell.HsColour.Anchors
92
41
1
stream :: [(TokenType, String)]


GHC.Bool.False
Language.Haskell.HsColour.Anchors
93
33
1
False :: Bool


Language.Haskell.HsColour.Anchors.munchParens
Language.Haskell.HsColour.Anchors
97
1
1
munchParens :: [(TokenType, String)] -> [(TokenType, String)]


munch
Language.Haskell.HsColour.Anchors
97
16
1
munch :: a -> [(TokenType, [Char])] -> [(TokenType, [Char])]


munch
Language.Haskell.HsColour.Anchors
98
9
2
munch ::
  Num a => a -> [(TokenType, [Char])] -> [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Anchors
98
31
1
rest :: [(TokenType, [Char])]


rest
Language.Haskell.HsColour.Anchors
98
39
1
rest :: [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
99
15
1
n :: a


rest
Language.Haskell.HsColour.Anchors
99
31
1
rest :: [(TokenType, [Char])]


munch
Language.Haskell.HsColour.Anchors
99
39
1
munch :: a -> [(TokenType, [Char])] -> [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
99
46
1
n :: a


GHC.Num.-
Language.Haskell.HsColour.Anchors
99
47
1
(-) :: Num a => a -> a -> a


rest
Language.Haskell.HsColour.Anchors
99
51
1
rest :: [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
100
15
1
n :: a


rest
Language.Haskell.HsColour.Anchors
100
31
1
rest :: [(TokenType, [Char])]


munch
Language.Haskell.HsColour.Anchors
100
39
1
munch :: a -> [(TokenType, [Char])] -> [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
100
46
1
n :: a


GHC.Num.+
Language.Haskell.HsColour.Anchors
100
47
1
(+) :: Num a => a -> a -> a


rest
Language.Haskell.HsColour.Anchors
100
51
1
rest :: [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
101
15
1
n :: a


rest
Language.Haskell.HsColour.Anchors
101
20
1
rest :: [(TokenType, [Char])]


munch
Language.Haskell.HsColour.Anchors
101
39
1
munch :: a -> [(TokenType, [Char])] -> [(TokenType, [Char])]


n
Language.Haskell.HsColour.Anchors
101
45
1
n :: a


rest
Language.Haskell.HsColour.Anchors
101
47
1
rest :: [(TokenType, [Char])]


GHC.Types.[]
Language.Haskell.HsColour.Anchors
102
39
1
[] :: [a]


Language.Haskell.HsColour.Anchors.fix
Language.Haskell.HsColour.Anchors
106
1
1
fix :: String -> String


v
Language.Haskell.HsColour.Anchors
106
10
1
v :: [Char]


Language.Haskell.HsColour.General.dropLast
Language.Haskell.HsColour.Anchors
106
15
1
dropLast :: Eq a => a -> [a] -> [a]


v
Language.Haskell.HsColour.Anchors
106
28
1
v :: String


v
Language.Haskell.HsColour.Anchors
107
5
1
v :: String


v
Language.Haskell.HsColour.Anchors
107
15
1
v :: String


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
111
1
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
111
17
1
stream :: [(TokenType, t)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
111
29
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
111
34
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
112
19
1
stream :: [(TokenType, t)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
112
29
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
112
34
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
113
6
1
stream :: [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
113
29
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.getConid
Language.Haskell.HsColour.Anchors
118
1
1
getConid :: [(TokenType, String)] -> Maybe String


stream
Language.Haskell.HsColour.Anchors
118
10
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
119
10
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


stream
Language.Haskell.HsColour.Anchors
119
15
1
stream :: [(TokenType, String)]


c
Language.Haskell.HsColour.Anchors
120
17
1
c :: String


rest
Language.Haskell.HsColour.Anchors
120
20
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.context
Language.Haskell.HsColour.Anchors
120
34
1
context :: [(TokenType, String)] -> [(TokenType, String)]


rest
Language.Haskell.HsColour.Anchors
120
42
1
rest :: [(TokenType, [Char])]


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
121
57
1
Just :: a -> Maybe a


c
Language.Haskell.HsColour.Anchors
121
62
1
c :: String


more
Language.Haskell.HsColour.Anchors
122
48
1
more :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
123
40
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


more
Language.Haskell.HsColour.Anchors
123
45
1
more :: [(TokenType, String)]


c'
Language.Haskell.HsColour.Anchors
124
47
1
c' :: String


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
124
57
1
Just :: a -> Maybe a


c'
Language.Haskell.HsColour.Anchors
124
62
1
c' :: String


v
Language.Haskell.HsColour.Anchors
125
39
1
v :: [(TokenType, String)]


debug
Language.Haskell.HsColour.Anchors
125
44
1
debug :: t -> t -> Maybe a


v
Language.Haskell.HsColour.Anchors
125
50
1
v :: String


GHC.Base.++
Language.Haskell.HsColour.Anchors
125
61
1
(++) :: [a] -> [a] -> [a]


c
Language.Haskell.HsColour.Anchors
125
63
1
c :: String


GHC.Base.++
Language.Haskell.HsColour.Anchors
125
64
1
(++) :: [a] -> [a] -> [a]


v
Language.Haskell.HsColour.Anchors
126
31
1
v :: [(TokenType, String)]


debug
Language.Haskell.HsColour.Anchors
126
36
1
debug :: t -> t -> Maybe a


v
Language.Haskell.HsColour.Anchors
126
42
1
v :: String


GHC.Base.++
Language.Haskell.HsColour.Anchors
126
53
1
(++) :: [a] -> [a] -> [a]


c
Language.Haskell.HsColour.Anchors
126
55
1
c :: String


GHC.Base.++
Language.Haskell.HsColour.Anchors
126
56
1
(++) :: [a] -> [a] -> [a]


rest
Language.Haskell.HsColour.Anchors
127
23
1
rest :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.context
Language.Haskell.HsColour.Anchors
127
37
1
context :: [(TokenType, String)] -> [(TokenType, String)]


rest
Language.Haskell.HsColour.Anchors
127
45
1
rest :: [(TokenType, [Char])]


more
Language.Haskell.HsColour.Anchors
128
53
1
more :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.skip
Language.Haskell.HsColour.Anchors
129
45
1
skip :: [(TokenType, t)] -> [(TokenType, t)]


more
Language.Haskell.HsColour.Anchors
129
50
1
more :: [(TokenType, String)]


c'
Language.Haskell.HsColour.Anchors
130
52
1
c' :: String


Data.Maybe.Just
Language.Haskell.HsColour.Anchors
130
62
1
Just :: a -> Maybe a


c'
Language.Haskell.HsColour.Anchors
130
67
1
c' :: String


v
Language.Haskell.HsColour.Anchors
131
44
1
v :: [(TokenType, String)]


debug
Language.Haskell.HsColour.Anchors
131
49
1
debug :: t -> t -> Maybe a


v
Language.Haskell.HsColour.Anchors
131
55
1
v :: String


v
Language.Haskell.HsColour.Anchors
132
36
1
v :: [(TokenType, String)]


debug
Language.Haskell.HsColour.Anchors
132
41
1
debug :: t -> t -> Maybe a


v
Language.Haskell.HsColour.Anchors
132
47
1
v :: String


v
Language.Haskell.HsColour.Anchors
133
9
1
v :: [(TokenType, String)]


debug
Language.Haskell.HsColour.Anchors
133
14
1
debug :: t -> t -> Maybe a


v
Language.Haskell.HsColour.Anchors
133
20
1
v :: String


debug
Language.Haskell.HsColour.Anchors
134
11
1
debug :: t -> t1 -> Maybe a


Data.Maybe.Nothing
Language.Haskell.HsColour.Anchors
134
27
1
Nothing :: Maybe a


Language.Haskell.HsColour.Anchors.context
Language.Haskell.HsColour.Anchors
140
1
1
context :: [(TokenType, String)] -> [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
140
9
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
140
37
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
141
9
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
141
38
1
stream :: [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
142
12
1
stream :: [(TokenType, String)]


Language.Haskell.HsColour.Anchors.context
Language.Haskell.HsColour.Anchors
142
22
1
context :: [(TokenType, String)] -> [(TokenType, String)]


stream
Language.Haskell.HsColour.Anchors
142
30
1
stream :: [(TokenType, String)]


GHC.Types.[]
Language.Haskell.HsColour.Anchors
143
14
1
[] :: [a]


Language.Haskell.HsColour.Anchors.emptyST
Language.Haskell.HsColour.Anchors
150
1
1
emptyST :: ST


GHC.Types.[]
Language.Haskell.HsColour.Anchors
150
11
1
[] :: [a]


Language.Haskell.HsColour.Anchors.insertST
Language.Haskell.HsColour.Anchors
153
1
1
insertST :: String -> ST -> ST


k
Language.Haskell.HsColour.Anchors
153
10
1
k :: String


st
Language.Haskell.HsColour.Anchors
153
12
1
st :: ST


Data.List.insert
Language.Haskell.HsColour.Anchors
153
17
1
insert :: Ord a => a -> [a] -> [a]


k
Language.Haskell.HsColour.Anchors
153
24
1
k :: String


st
Language.Haskell.HsColour.Anchors
153
26
1
st :: ST


Language.Haskell.HsColour.Anchors.inST
Language.Haskell.HsColour.Anchors
156
1
1
inST :: String -> ST -> Bool


k
Language.Haskell.HsColour.Anchors
156
6
1
k :: String


st
Language.Haskell.HsColour.Anchors
156
8
1
st :: ST


k
Language.Haskell.HsColour.Anchors
156
13
1
k :: String


GHC.List.elem
Language.Haskell.HsColour.Anchors
156
15
1
elem :: Eq a => a -> [a] -> Bool


st
Language.Haskell.HsColour.Anchors
156
22
1
st :: ST




Language.Haskell.HsColour.ColourHighlight.$con2tag_Highlight
Language.Haskell.HsColour.ColourHighlight
1
1
1
($con2tag_Highlight) :: Highlight -> Int#


Language.Haskell.HsColour.ColourHighlight.Black
Language.Haskell.HsColour.ColourHighlight
13
15
1
Black :: Colour


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.ColourHighlight
13
23
1
Red :: Colour


Language.Haskell.HsColour.ColourHighlight.Green
Language.Haskell.HsColour.ColourHighlight
13
29
1
Green :: Colour


Language.Haskell.HsColour.ColourHighlight.Yellow
Language.Haskell.HsColour.ColourHighlight
13
37
1
Yellow :: Colour


Language.Haskell.HsColour.ColourHighlight.Blue
Language.Haskell.HsColour.ColourHighlight
13
46
1
Blue :: Colour


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.ColourHighlight
13
53
1
Magenta :: Colour


Language.Haskell.HsColour.ColourHighlight.Cyan
Language.Haskell.HsColour.ColourHighlight
13
63
1
Cyan :: Colour


Language.Haskell.HsColour.ColourHighlight.White
Language.Haskell.HsColour.ColourHighlight
13
70
1
White :: Colour


Language.Haskell.HsColour.ColourHighlight.Rgb
Language.Haskell.HsColour.ColourHighlight
13
78
1
Rgb :: Word8 -> Word8 -> Word8 -> Colour


GHC.Classes.D:Eq
Language.Haskell.HsColour.ColourHighlight
14
13
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Show.D:Show
Language.Haskell.HsColour.ColourHighlight
14
16
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


GHC.Read.D:Read
Language.Haskell.HsColour.ColourHighlight
14
21
6
D:Read ::
  (Int -> ReadS a)
  -> ReadS [a]
  -> ReadPrec a
  -> ReadPrec [a]
  -> T:Read a


Language.Haskell.HsColour.ColourHighlight.base256
Language.Haskell.HsColour.ColourHighlight
18
1
2
base256 ::
  Integral int => (Word8 -> Word8 -> Word8 -> r) -> int -> r


kont
Language.Haskell.HsColour.ColourHighlight
18
9
1
kont :: Word8 -> Word8 -> Word8 -> r


x
Language.Haskell.HsColour.ColourHighlight
18
14
1
x :: int


r
Language.Haskell.HsColour.ColourHighlight
20
10
1
r :: int


gb
Language.Haskell.HsColour.ColourHighlight
20
12
1
gb :: int


GHC.Real.divMod
Language.Haskell.HsColour.ColourHighlight
20
18
1
divMod :: Integral a => a -> a -> (a, a)


x
Language.Haskell.HsColour.ColourHighlight
20
25
1
x :: Int


g
Language.Haskell.HsColour.ColourHighlight
21
10
1
g :: int


b
Language.Haskell.HsColour.ColourHighlight
21
12
1
b :: int


GHC.Real.divMod
Language.Haskell.HsColour.ColourHighlight
21
18
1
divMod :: Integral a => a -> a -> (a, a)


gb
Language.Haskell.HsColour.ColourHighlight
21
25
1
gb :: int


fi
Language.Haskell.HsColour.ColourHighlight
22
9
1
fi :: int -> Word8


GHC.Real.fromIntegral
Language.Haskell.HsColour.ColourHighlight
22
14
1
fromIntegral :: (Integral a, Num b) => a -> b


kont
Language.Haskell.HsColour.ColourHighlight
24
9
1
kont :: Word8 -> Word8 -> Word8 -> r


fi
Language.Haskell.HsColour.ColourHighlight
24
15
1
fi :: int -> Word8


r
Language.Haskell.HsColour.ColourHighlight
24
18
1
r :: Word8


fi
Language.Haskell.HsColour.ColourHighlight
24
22
1
fi :: int -> Word8


g
Language.Haskell.HsColour.ColourHighlight
24
25
1
g :: Word8


fi
Language.Haskell.HsColour.ColourHighlight
24
29
1
fi :: int -> Word8


b
Language.Haskell.HsColour.ColourHighlight
24
32
1
b :: Word8


Language.Haskell.HsColour.ColourHighlight.unbase
Language.Haskell.HsColour.ColourHighlight
28
1
1
unbase :: Integral int => int -> Word8 -> Word8 -> Word8 -> int


base
Language.Haskell.HsColour.ColourHighlight
28
8
1
base :: int


r
Language.Haskell.HsColour.ColourHighlight
28
13
1
r :: Word8


g
Language.Haskell.HsColour.ColourHighlight
28
15
1
g :: Word8


b
Language.Haskell.HsColour.ColourHighlight
28
17
1
b :: Word8


fi
Language.Haskell.HsColour.ColourHighlight
28
22
1
fi :: int -> Word8


r
Language.Haskell.HsColour.ColourHighlight
28
25
1
r :: Word8


GHC.Num.*
Language.Haskell.HsColour.ColourHighlight
28
26
1
(*) :: Num a => a -> a -> a


base
Language.Haskell.HsColour.ColourHighlight
28
27
1
base :: int


GHC.Num.+
Language.Haskell.HsColour.ColourHighlight
28
31
1
(+) :: Num a => a -> a -> a


fi
Language.Haskell.HsColour.ColourHighlight
28
32
1
fi :: int -> Word8


g
Language.Haskell.HsColour.ColourHighlight
28
35
1
g :: Word8


GHC.Num.*
Language.Haskell.HsColour.ColourHighlight
28
37
1
(*) :: Num a => a -> a -> a


base
Language.Haskell.HsColour.ColourHighlight
28
38
1
base :: int


GHC.Num.+
Language.Haskell.HsColour.ColourHighlight
28
42
1
(+) :: Num a => a -> a -> a


fi
Language.Haskell.HsColour.ColourHighlight
28
43
1
fi :: int -> Word8


b
Language.Haskell.HsColour.ColourHighlight
28
46
1
b :: Word8


fi
Language.Haskell.HsColour.ColourHighlight
29
11
1
fi :: Word8 -> int


GHC.Real.fromIntegral
Language.Haskell.HsColour.ColourHighlight
29
16
1
fromIntegral :: (Integral a, Num b) => a -> b


Language.Haskell.HsColour.ColourHighlight.rgb24bit_to_xterm256
Language.Haskell.HsColour.ColourHighlight
33
1
1
rgb24bit_to_xterm256 :: Integral t => Word8 -> Word8 -> Word8 -> t


r
Language.Haskell.HsColour.ColourHighlight
33
22
1
r :: Word8


g
Language.Haskell.HsColour.ColourHighlight
33
24
1
g :: Word8


b
Language.Haskell.HsColour.ColourHighlight
33
26
1
b :: Word8


f
Language.Haskell.HsColour.ColourHighlight
33
34
1
f :: Word8 -> Word8


GHC.Real.div
Language.Haskell.HsColour.ColourHighlight
33
39
1
div :: Integral a => a -> a -> a


GHC.Num.+
Language.Haskell.HsColour.ColourHighlight
34
33
1
(+) :: Num a => a -> a -> a


Language.Haskell.HsColour.ColourHighlight.unbase
Language.Haskell.HsColour.ColourHighlight
34
35
1
unbase :: Integral int => int -> Word8 -> Word8 -> Word8 -> int


f
Language.Haskell.HsColour.ColourHighlight
34
45
1
f :: Word8 -> Word8


r
Language.Haskell.HsColour.ColourHighlight
34
47
1
r :: Word8


f
Language.Haskell.HsColour.ColourHighlight
34
51
1
f :: Word8 -> Word8


g
Language.Haskell.HsColour.ColourHighlight
34
53
1
g :: Word8


f
Language.Haskell.HsColour.ColourHighlight
34
57
1
f :: Word8 -> Word8


b
Language.Haskell.HsColour.ColourHighlight
34
59
1
b :: Word8


Language.Haskell.HsColour.ColourHighlight.projectToBasicColour8
Language.Haskell.HsColour.ColourHighlight
39
1
1
projectToBasicColour8 :: Colour -> Colour


r
Language.Haskell.HsColour.ColourHighlight
39
28
1
r :: Word8


g
Language.Haskell.HsColour.ColourHighlight
39
30
1
g :: Word8


b
Language.Haskell.HsColour.ColourHighlight
39
32
1
b :: Word8


f
Language.Haskell.HsColour.ColourHighlight
39
41
1
f :: Word8 -> Word8


GHC.Real.div
Language.Haskell.HsColour.ColourHighlight
39
46
1
div :: Integral a => a -> a -> a


GHC.Enum.toEnum
Language.Haskell.HsColour.ColourHighlight
40
31
1
toEnum :: Enum a => Int -> a


Language.Haskell.HsColour.ColourHighlight.unbase
Language.Haskell.HsColour.ColourHighlight
40
40
1
unbase :: Integral int => int -> Word8 -> Word8 -> Word8 -> int


f
Language.Haskell.HsColour.ColourHighlight
40
50
1
f :: Word8 -> Word8


r
Language.Haskell.HsColour.ColourHighlight
40
52
1
r :: Word8


f
Language.Haskell.HsColour.ColourHighlight
40
56
1
f :: Word8 -> Word8


g
Language.Haskell.HsColour.ColourHighlight
40
58
1
g :: Word8


f
Language.Haskell.HsColour.ColourHighlight
40
62
1
f :: Word8 -> Word8


b
Language.Haskell.HsColour.ColourHighlight
40
64
1
b :: Word8


x
Language.Haskell.HsColour.ColourHighlight
41
23
1
x :: Colour


x
Language.Haskell.HsColour.ColourHighlight
41
27
1
x :: Int


Language.Haskell.HsColour.ColourHighlight.hlProjectToBasicColour8
Language.Haskell.HsColour.ColourHighlight
46
1
1
hlProjectToBasicColour8 :: Highlight -> Highlight


c
Language.Haskell.HsColour.ColourHighlight
46
37
1
c :: Colour


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.ColourHighlight
46
42
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.projectToBasicColour8
Language.Haskell.HsColour.ColourHighlight
46
54
1
projectToBasicColour8 :: Colour -> Colour


c
Language.Haskell.HsColour.ColourHighlight
46
76
1
c :: Colour


c
Language.Haskell.HsColour.ColourHighlight
47
37
1
c :: Colour


Language.Haskell.HsColour.ColourHighlight.Background
Language.Haskell.HsColour.ColourHighlight
47
42
1
Background :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.projectToBasicColour8
Language.Haskell.HsColour.ColourHighlight
47
54
1
projectToBasicColour8 :: Colour -> Colour


c
Language.Haskell.HsColour.ColourHighlight
47
76
1
c :: Colour


h
Language.Haskell.HsColour.ColourHighlight
48
25
1
h :: Highlight


h
Language.Haskell.HsColour.ColourHighlight
48
29
1
h :: Highlight


GHC.Enum.D:Enum
Language.Haskell.HsColour.ColourHighlight
52
10
10
D:Enum ::
  (a -> a)
  -> (a -> a)
  -> (Int -> a)
  -> (a -> Int)
  -> (a -> [a])
  -> (a -> a -> [a])
  -> (a -> a -> [a])
  -> (a -> a -> a -> [a])
  -> T:Enum a


Language.Haskell.HsColour.ColourHighlight.Black
Language.Haskell.HsColour.ColourHighlight
53
16
1
Black :: Colour


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.ColourHighlight
54
16
1
Red :: Colour


Language.Haskell.HsColour.ColourHighlight.Green
Language.Haskell.HsColour.ColourHighlight
55
16
1
Green :: Colour


Language.Haskell.HsColour.ColourHighlight.Yellow
Language.Haskell.HsColour.ColourHighlight
56
16
1
Yellow :: Colour


Language.Haskell.HsColour.ColourHighlight.Blue
Language.Haskell.HsColour.ColourHighlight
57
16
1
Blue :: Colour


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.ColourHighlight
58
16
1
Magenta :: Colour


Language.Haskell.HsColour.ColourHighlight.Cyan
Language.Haskell.HsColour.ColourHighlight
59
16
1
Cyan :: Colour


Language.Haskell.HsColour.ColourHighlight.White
Language.Haskell.HsColour.ColourHighlight
60
16
1
White :: Colour


x
Language.Haskell.HsColour.ColourHighlight
62
12
1
x :: Int


Language.Haskell.HsColour.ColourHighlight.base256
Language.Haskell.HsColour.ColourHighlight
62
16
2
base256 ::
  Integral int => (Word8 -> Word8 -> Word8 -> r) -> int -> r


Language.Haskell.HsColour.ColourHighlight.Rgb
Language.Haskell.HsColour.ColourHighlight
62
24
1
Rgb :: Word8 -> Word8 -> Word8 -> Colour


x
Language.Haskell.HsColour.ColourHighlight
62
29
1
x :: Int


GHC.Num.-
Language.Haskell.HsColour.ColourHighlight
62
30
1
(-) :: Num a => a -> a -> a


r
Language.Haskell.HsColour.ColourHighlight
73
19
1
r :: Word8


g
Language.Haskell.HsColour.ColourHighlight
73
21
1
g :: Word8


b
Language.Haskell.HsColour.ColourHighlight
73
23
1
b :: Word8


GHC.Num.+
Language.Haskell.HsColour.ColourHighlight
73
30
1
(+) :: Num a => a -> a -> a


Language.Haskell.HsColour.ColourHighlight.unbase
Language.Haskell.HsColour.ColourHighlight
73
32
1
unbase :: Integral int => int -> Word8 -> Word8 -> Word8 -> int


r
Language.Haskell.HsColour.ColourHighlight
73
43
1
r :: Word8


g
Language.Haskell.HsColour.ColourHighlight
73
45
1
g :: Word8


b
Language.Haskell.HsColour.ColourHighlight
73
47
1
b :: Word8


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.ColourHighlight
78
5
1
Normal :: Highlight


Language.Haskell.HsColour.ColourHighlight.Bold
Language.Haskell.HsColour.ColourHighlight
79
5
1
Bold :: Highlight


Language.Haskell.HsColour.ColourHighlight.Dim
Language.Haskell.HsColour.ColourHighlight
80
5
1
Dim :: Highlight


Language.Haskell.HsColour.ColourHighlight.Underscore
Language.Haskell.HsColour.ColourHighlight
81
5
1
Underscore :: Highlight


Language.Haskell.HsColour.ColourHighlight.Blink
Language.Haskell.HsColour.ColourHighlight
82
5
1
Blink :: Highlight


Language.Haskell.HsColour.ColourHighlight.ReverseVideo
Language.Haskell.HsColour.ColourHighlight
83
5
1
ReverseVideo :: Highlight


Language.Haskell.HsColour.ColourHighlight.Concealed
Language.Haskell.HsColour.ColourHighlight
84
5
1
Concealed :: Highlight


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.ColourHighlight
85
5
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Background
Language.Haskell.HsColour.ColourHighlight
86
5
1
Background :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Italic
Language.Haskell.HsColour.ColourHighlight
88
5
1
Italic :: Highlight


GHC.Classes.D:Eq
Language.Haskell.HsColour.ColourHighlight
89
13
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Show.D:Show
Language.Haskell.HsColour.ColourHighlight
89
16
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


GHC.Read.D:Read
Language.Haskell.HsColour.ColourHighlight
89
21
6
D:Read ::
  (Int -> ReadS a)
  -> ReadS [a]
  -> ReadPrec a
  -> ReadPrec [a]
  -> T:Read a




Language.Haskell.HsColour.Output.$con2tag_TerminalType
Language.Haskell.HsColour.Output
1
1
1
($con2tag_TerminalType) :: TerminalType -> Int#


GHC.Show.D:Show
Language.Haskell.HsColour.Output
6
15
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


GHC.Classes.D:Eq
Language.Haskell.HsColour.Output
6
20
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Classes.D:Ord
Language.Haskell.HsColour.Output
6
23
10
D:Ord ::
  Eq a =>
  (a -> a -> Ordering)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> a)
  -> (a -> a -> a)
  -> T:Ord a


GHC.Classes.D:Eq
Language.Haskell.HsColour.Output
17
13
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Show.D:Show
Language.Haskell.HsColour.Output
17
16
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a




Language.Haskell.HsColour.ANSI.at
Language.Haskell.HsColour.ANSI
37
1
1
at :: Pos -> String -> String


x
Language.Haskell.HsColour.ANSI
37
5
1
x :: Int


y
Language.Haskell.HsColour.ANSI
37
7
1
y :: Int


s
Language.Haskell.HsColour.ANSI
37
10
1
s :: String


Language.Haskell.HsColour.ANSI.goto
Language.Haskell.HsColour.ANSI
37
15
1
goto :: Int -> Int -> String


x
Language.Haskell.HsColour.ANSI
37
20
1
x :: Int


y
Language.Haskell.HsColour.ANSI
37
22
1
y :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
37
24
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.ANSI
37
27
1
s :: String


Language.Haskell.HsColour.ANSI.goto
Language.Haskell.HsColour.ANSI
38
1
1
goto :: Int -> Int -> String


x
Language.Haskell.HsColour.ANSI
38
6
1
x :: Int


y
Language.Haskell.HsColour.ANSI
38
8
1
y :: Int


GHC.Types.:
Language.Haskell.HsColour.ANSI
38
21
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.ANSI
38
25
1
(:) :: a -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ANSI
38
27
1
show :: Show a => a -> String


y
Language.Haskell.HsColour.ANSI
38
32
1
y :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
38
34
1
(++) :: [a] -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.ANSI
38
40
1
(:) :: a -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ANSI
38
41
1
show :: Show a => a -> String


x
Language.Haskell.HsColour.ANSI
38
46
1
x :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
38
48
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.ANSI.home
Language.Haskell.HsColour.ANSI
39
1
1
home :: String


Language.Haskell.HsColour.ANSI.goto
Language.Haskell.HsColour.ANSI
39
15
1
goto :: Int -> Int -> String


Language.Haskell.HsColour.ANSI.cursorUp
Language.Haskell.HsColour.ANSI
41
1
1
cursorUp :: [Char]


Language.Haskell.HsColour.ANSI.cursorDown
Language.Haskell.HsColour.ANSI
42
1
1
cursorDown :: [Char]


Language.Haskell.HsColour.ANSI.cursorRight
Language.Haskell.HsColour.ANSI
43
1
1
cursorRight :: [Char]


Language.Haskell.HsColour.ANSI.cursorLeft
Language.Haskell.HsColour.ANSI
44
1
1
cursorLeft :: [Char]


Language.Haskell.HsColour.ANSI.cleareol
Language.Haskell.HsColour.ANSI
46
1
1
cleareol :: [Char]


Language.Haskell.HsColour.ANSI.clearbol
Language.Haskell.HsColour.ANSI
47
1
1
clearbol :: [Char]


Language.Haskell.HsColour.ANSI.clearline
Language.Haskell.HsColour.ANSI
48
1
1
clearline :: [Char]


Language.Haskell.HsColour.ANSI.clearDown
Language.Haskell.HsColour.ANSI
49
1
1
clearDown :: [Char]


Language.Haskell.HsColour.ANSI.clearUp
Language.Haskell.HsColour.ANSI
50
1
1
clearUp :: [Char]


Language.Haskell.HsColour.ANSI.cls
Language.Haskell.HsColour.ANSI
52
1
1
cls :: String


Language.Haskell.HsColour.ANSI.savePosition
Language.Haskell.HsColour.ANSI
55
1
1
savePosition :: [Char]


Language.Haskell.HsColour.ANSI.restorePosition
Language.Haskell.HsColour.ANSI
56
1
1
restorePosition :: [Char]


GHC.Enum.D:Enum
Language.Haskell.HsColour.ANSI
62
10
10
D:Enum ::
  (a -> a)
  -> (a -> a)
  -> (Int -> a)
  -> (a -> Int)
  -> (a -> [a])
  -> (a -> a -> [a])
  -> (a -> a -> [a])
  -> (a -> a -> a -> [a])
  -> T:Enum a


GHC.Err.error
Language.Haskell.HsColour.ANSI
71
39
1
error :: [Char] -> a


GHC.Err.error
Language.Haskell.HsColour.ANSI
72
39
1
error :: [Char] -> a


c
Language.Haskell.HsColour.ANSI
73
24
1
c :: Colour


GHC.Num.+
Language.Haskell.HsColour.ANSI
73
32
1
(+) :: Num a => a -> a -> a


GHC.Enum.fromEnum
Language.Haskell.HsColour.ANSI
73
34
1
fromEnum :: Enum a => a -> Int


c
Language.Haskell.HsColour.ANSI
73
43
1
c :: Colour


c
Language.Haskell.HsColour.ANSI
74
24
1
c :: Colour


GHC.Num.+
Language.Haskell.HsColour.ANSI
74
32
1
(+) :: Num a => a -> a -> a


GHC.Enum.fromEnum
Language.Haskell.HsColour.ANSI
74
34
1
fromEnum :: Enum a => a -> Int


c
Language.Haskell.HsColour.ANSI
74
43
1
c :: Colour


Language.Haskell.HsColour.ANSI.highlight
Language.Haskell.HsColour.ANSI
80
1
1
highlight :: [Highlight] -> String -> String


Language.Haskell.HsColour.ANSI.highlightG
Language.Haskell.HsColour.ANSI
80
13
1
highlightG :: TerminalType -> [Highlight] -> String -> String


Language.Haskell.HsColour.Output.Ansi16Colour
Language.Haskell.HsColour.ANSI
80
24
1
Ansi16Colour :: TerminalType


Language.Haskell.HsColour.ANSI.highlightOn
Language.Haskell.HsColour.ANSI
84
1
1
highlightOn :: [Highlight] -> String


Language.Haskell.HsColour.ANSI.highlightOnG
Language.Haskell.HsColour.ANSI
84
15
1
highlightOnG :: TerminalType -> [Highlight] -> String


Language.Haskell.HsColour.Output.Ansi16Colour
Language.Haskell.HsColour.ANSI
84
28
1
Ansi16Colour :: TerminalType


Language.Haskell.HsColour.ANSI.highlightG
Language.Haskell.HsColour.ANSI
89
1
1
highlightG :: TerminalType -> [Highlight] -> String -> String


tt
Language.Haskell.HsColour.ANSI
89
12
1
tt :: TerminalType


attrs
Language.Haskell.HsColour.ANSI
89
15
1
attrs :: [Highlight]


s
Language.Haskell.HsColour.ANSI
89
21
1
s :: String


Language.Haskell.HsColour.ANSI.highlightOnG
Language.Haskell.HsColour.ANSI
89
25
1
highlightOnG :: TerminalType -> [Highlight] -> String


tt
Language.Haskell.HsColour.ANSI
89
38
1
tt :: TerminalType


attrs
Language.Haskell.HsColour.ANSI
89
41
1
attrs :: [Highlight]


GHC.Base.++
Language.Haskell.HsColour.ANSI
89
47
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.ANSI
89
50
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.ANSI
89
52
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.ANSI.highlightOff
Language.Haskell.HsColour.ANSI
89
55
1
highlightOff :: [Char]


Language.Haskell.HsColour.ANSI.highlightOnG
Language.Haskell.HsColour.ANSI
92
1
1
highlightOnG :: TerminalType -> [Highlight] -> String


tt
Language.Haskell.HsColour.ANSI
92
14
1
tt :: TerminalType


Language.Haskell.HsColour.ANSI.highlightOnG
Language.Haskell.HsColour.ANSI
92
26
1
highlightOnG :: TerminalType -> [Highlight] -> String


tt
Language.Haskell.HsColour.ANSI
92
39
1
tt :: TerminalType


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.ANSI
92
43
1
Normal :: Highlight


tt
Language.Haskell.HsColour.ANSI
93
14
1
tt :: TerminalType


attrs
Language.Haskell.HsColour.ANSI
93
17
1
attrs :: [Highlight]


GHC.Base.++
Language.Haskell.HsColour.ANSI
94
24
1
(++) :: [a] -> [a] -> [a]


GHC.List.concat
Language.Haskell.HsColour.ANSI
94
27
1
concat :: [[a]] -> [a]


Data.List.intersperse
Language.Haskell.HsColour.ANSI
94
35
1
intersperse :: a -> [a] -> [a]


GHC.List.concatMap
Language.Haskell.HsColour.ANSI
94
52
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.ANSI.renderAttrG
Language.Haskell.HsColour.ANSI
94
63
1
renderAttrG :: TerminalType -> Highlight -> [String]


tt
Language.Haskell.HsColour.ANSI
94
75
1
tt :: TerminalType


attrs
Language.Haskell.HsColour.ANSI
94
79
1
attrs :: [Highlight]


GHC.Base.++
Language.Haskell.HsColour.ANSI
95
24
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.ANSI.highlightOff
Language.Haskell.HsColour.ANSI
97
1
1
highlightOff :: [Char]


Language.Haskell.HsColour.ANSI.renderAttrG
Language.Haskell.HsColour.ANSI
100
1
1
renderAttrG :: TerminalType -> Highlight -> [String]


r
Language.Haskell.HsColour.ANSI
100
49
1
r :: Word8


g
Language.Haskell.HsColour.ANSI
100
51
1
g :: Word8


b
Language.Haskell.HsColour.ANSI
100
53
1
b :: Word8


GHC.Show.show
Language.Haskell.HsColour.ANSI
101
18
1
show :: Show a => a -> String


Language.Haskell.HsColour.ColourHighlight.rgb24bit_to_xterm256
Language.Haskell.HsColour.ANSI
101
25
1
rgb24bit_to_xterm256 :: Integral t => Word8 -> Word8 -> Word8 -> t


r
Language.Haskell.HsColour.ANSI
101
46
1
r :: Word8


g
Language.Haskell.HsColour.ANSI
101
48
1
g :: Word8


b
Language.Haskell.HsColour.ANSI
101
50
1
b :: Word8


r
Language.Haskell.HsColour.ANSI
102
49
1
r :: Word8


g
Language.Haskell.HsColour.ANSI
102
51
1
g :: Word8


b
Language.Haskell.HsColour.ANSI
102
53
1
b :: Word8


GHC.Show.show
Language.Haskell.HsColour.ANSI
103
18
1
show :: Show a => a -> String


Language.Haskell.HsColour.ColourHighlight.rgb24bit_to_xterm256
Language.Haskell.HsColour.ANSI
103
25
1
rgb24bit_to_xterm256 :: Integral t => Word8 -> Word8 -> Word8 -> t


r
Language.Haskell.HsColour.ANSI
103
46
1
r :: Word8


g
Language.Haskell.HsColour.ANSI
103
48
1
g :: Word8


b
Language.Haskell.HsColour.ANSI
103
50
1
b :: Word8


a
Language.Haskell.HsColour.ANSI
104
15
1
a :: Highlight


GHC.Show.show
Language.Haskell.HsColour.ANSI
105
7
1
show :: Show a => a -> String


GHC.Enum.fromEnum
Language.Haskell.HsColour.ANSI
105
13
1
fromEnum :: Enum a => a -> Int


Language.Haskell.HsColour.ColourHighlight.hlProjectToBasicColour8
Language.Haskell.HsColour.ANSI
105
23
1
hlProjectToBasicColour8 :: Highlight -> Highlight


a
Language.Haskell.HsColour.ANSI
105
47
1
a :: Highlight


Language.Haskell.HsColour.ANSI.colourCycle
Language.Haskell.HsColour.ANSI
109
1
1
colourCycle :: [Colour]


GHC.List.cycle
Language.Haskell.HsColour.ANSI
109
15
1
cycle :: [a] -> [a]


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.ANSI
109
22
1
Red :: Colour


Language.Haskell.HsColour.ColourHighlight.Blue
Language.Haskell.HsColour.ANSI
109
26
1
Blue :: Colour


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.ANSI
109
31
1
Magenta :: Colour


Language.Haskell.HsColour.ColourHighlight.Green
Language.Haskell.HsColour.ANSI
109
39
1
Green :: Colour


Language.Haskell.HsColour.ColourHighlight.Cyan
Language.Haskell.HsColour.ANSI
109
45
1
Cyan :: Colour


Language.Haskell.HsColour.ANSI.enableScrollRegion
Language.Haskell.HsColour.ANSI
114
1
1
enableScrollRegion :: Int -> Int -> String


start
Language.Haskell.HsColour.ANSI
114
20
1
start :: Int


end
Language.Haskell.HsColour.ANSI
114
26
1
end :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
114
39
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ANSI
114
41
1
show :: Show a => a -> String


start
Language.Haskell.HsColour.ANSI
114
46
1
start :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
114
51
1
(++) :: [a] -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.ANSI
114
56
1
(:) :: a -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ANSI
114
57
1
show :: Show a => a -> String


end
Language.Haskell.HsColour.ANSI
114
62
1
end :: Int


GHC.Base.++
Language.Haskell.HsColour.ANSI
114
65
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.ANSI.scrollDown
Language.Haskell.HsColour.ANSI
117
1
1
scrollDown :: String


Language.Haskell.HsColour.ANSI.scrollUp
Language.Haskell.HsColour.ANSI
119
1
1
scrollUp :: String


Language.Haskell.HsColour.ANSI.lineWrap
Language.Haskell.HsColour.ANSI
123
1
1
lineWrap :: Bool -> [Char]




Language.Haskell.HsColour.Options.$con2tag_Option
Language.Haskell.HsColour.Options
1
1
1
($con2tag_Option) :: Option -> Int#


GHC.Classes.D:Eq
Language.Haskell.HsColour.Options
21
12
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a




variantselection
Language.Haskell.HsColour.Colourise
17
6
1
variantselection :: [Highlight]


Language.Haskell.HsColour.Colourise.ColourPrefs
Language.Haskell.HsColour.Colourise
17
20
17
ColourPrefs ::
  [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> [Highlight]
  -> ColourPrefs


Language.Haskell.HsColour.Colourise.keyword
Language.Haskell.HsColour.Colourise
18
5
1
keyword :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.keyglyph
Language.Haskell.HsColour.Colourise
18
14
1
keyglyph :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.layout
Language.Haskell.HsColour.Colourise
18
24
1
layout :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.comment
Language.Haskell.HsColour.Colourise
18
32
1
comment :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.conid
Language.Haskell.HsColour.Colourise
19
5
1
conid :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.varid
Language.Haskell.HsColour.Colourise
19
12
1
varid :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.conop
Language.Haskell.HsColour.Colourise
19
19
1
conop :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.varop
Language.Haskell.HsColour.Colourise
19
26
1
varop :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.string
Language.Haskell.HsColour.Colourise
20
5
1
string :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.char
Language.Haskell.HsColour.Colourise
20
13
1
char :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.number
Language.Haskell.HsColour.Colourise
20
19
1
number :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.cpp
Language.Haskell.HsColour.Colourise
20
27
1
cpp :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.selection
Language.Haskell.HsColour.Colourise
21
5
1
selection :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.variantselection
Language.Haskell.HsColour.Colourise
21
16
1
variantselection :: ColourPrefs -> [Highlight]


Language.Haskell.HsColour.Colourise.definition
Language.Haskell.HsColour.Colourise
21
34
1
definition :: ColourPrefs -> [Highlight]


GHC.Classes.D:Eq
Language.Haskell.HsColour.Colourise
22
15
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Show.D:Show
Language.Haskell.HsColour.Colourise
22
18
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


GHC.Read.D:Read
Language.Haskell.HsColour.Colourise
22
23
6
D:Read ::
  (Int -> ReadS a)
  -> ReadS [a]
  -> ReadPrec a
  -> ReadPrec [a]
  -> T:Read a


Language.Haskell.HsColour.Colourise.defaultColourPrefs
Language.Haskell.HsColour.Colourise
24
1
1
defaultColourPrefs :: ColourPrefs


keyword
Language.Haskell.HsColour.Colourise
25
5
1
keyword :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
25
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Green
Language.Haskell.HsColour.Colourise
25
28
1
Green :: Colour


Language.Haskell.HsColour.ColourHighlight.Underscore
Language.Haskell.HsColour.Colourise
25
34
1
Underscore :: Highlight


keyglyph
Language.Haskell.HsColour.Colourise
26
5
1
keyglyph :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
26
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.Colourise
26
28
1
Red :: Colour


layout
Language.Haskell.HsColour.Colourise
27
5
1
layout :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
27
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Cyan
Language.Haskell.HsColour.Colourise
27
28
1
Cyan :: Colour


comment
Language.Haskell.HsColour.Colourise
28
5
1
comment :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
28
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Blue
Language.Haskell.HsColour.Colourise
28
28
1
Blue :: Colour


Language.Haskell.HsColour.ColourHighlight.Italic
Language.Haskell.HsColour.Colourise
28
34
1
Italic :: Highlight


conid
Language.Haskell.HsColour.Colourise
29
5
1
conid :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.Colourise
29
17
1
Normal :: Highlight


varid
Language.Haskell.HsColour.Colourise
30
5
1
varid :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.Colourise
30
17
1
Normal :: Highlight


conop
Language.Haskell.HsColour.Colourise
31
5
1
conop :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
31
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.Colourise
31
28
1
Red :: Colour


Language.Haskell.HsColour.ColourHighlight.Bold
Language.Haskell.HsColour.Colourise
31
32
1
Bold :: Highlight


varop
Language.Haskell.HsColour.Colourise
32
5
1
varop :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
32
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Cyan
Language.Haskell.HsColour.Colourise
32
28
1
Cyan :: Colour


string
Language.Haskell.HsColour.Colourise
33
5
1
string :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
33
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.Colourise
33
28
1
Magenta :: Colour


char
Language.Haskell.HsColour.Colourise
34
5
1
char :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
34
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.Colourise
34
28
1
Magenta :: Colour


number
Language.Haskell.HsColour.Colourise
35
5
1
number :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
35
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.Colourise
35
28
1
Magenta :: Colour


cpp
Language.Haskell.HsColour.Colourise
36
5
1
cpp :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
36
17
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.Colourise
36
28
1
Magenta :: Colour


Language.Haskell.HsColour.ColourHighlight.Dim
Language.Haskell.HsColour.Colourise
36
36
1
Dim :: Highlight


selection
Language.Haskell.HsColour.Colourise
37
5
1
selection :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Bold
Language.Haskell.HsColour.Colourise
37
18
1
Bold :: Highlight


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
37
24
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Magenta
Language.Haskell.HsColour.Colourise
37
35
1
Magenta :: Colour


variantselection
Language.Haskell.HsColour.Colourise
38
5
1
variantselection :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Dim
Language.Haskell.HsColour.Colourise
38
25
1
Dim :: Highlight


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
38
30
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Red
Language.Haskell.HsColour.Colourise
38
41
1
Red :: Colour


Language.Haskell.HsColour.ColourHighlight.Underscore
Language.Haskell.HsColour.Colourise
38
46
1
Underscore :: Highlight


definition
Language.Haskell.HsColour.Colourise
39
5
1
definition :: [Highlight]


Language.Haskell.HsColour.ColourHighlight.Foreground
Language.Haskell.HsColour.Colourise
39
19
1
Foreground :: Colour -> Highlight


Language.Haskell.HsColour.ColourHighlight.Blue
Language.Haskell.HsColour.Colourise
39
30
1
Blue :: Colour


Language.Haskell.HsColour.Colourise.parseColourPrefs
Language.Haskell.HsColour.Colourise
44
1
1
parseColourPrefs :: String -> String -> IO ColourPrefs


file
Language.Haskell.HsColour.Colourise
44
18
1
file :: String


x
Language.Haskell.HsColour.Colourise
44
23
1
x :: String


Text.Read.reads
Language.Haskell.HsColour.Colourise
45
10
1
reads :: Read a => ReadS a


x
Language.Haskell.HsColour.Colourise
45
16
1
x :: String


res
Language.Haskell.HsColour.Colourise
46
10
1
res :: ColourPrefs


GHC.Base.return
Language.Haskell.HsColour.Colourise
46
22
1
return :: Monad m => forall a. a -> m a


res
Language.Haskell.HsColour.Colourise
46
29
1
res :: ColourPrefs


GHC.IO.Handle.Text.hPutStrLn
Language.Haskell.HsColour.Colourise
47
17
1
hPutStrLn :: Handle -> String -> IO ()


GHC.IO.Handle.FD.stderr
Language.Haskell.HsColour.Colourise
47
27
1
stderr :: Handle


GHC.Base.++
Language.Haskell.HsColour.Colourise
47
71
1
(++) :: [a] -> [a] -> [a]


file
Language.Haskell.HsColour.Colourise
47
73
1
file :: String


GHC.Base.++
Language.Haskell.HsColour.Colourise
48
35
1
(++) :: [a] -> [a] -> [a]


GHC.Base.return
Language.Haskell.HsColour.Colourise
49
17
1
return :: Monad m => forall a. a -> m a


Language.Haskell.HsColour.Colourise.defaultColourPrefs
Language.Haskell.HsColour.Colourise
49
24
1
defaultColourPrefs :: ColourPrefs


Language.Haskell.HsColour.Colourise.readColourPrefs
Language.Haskell.HsColour.Colourise
54
1
1
readColourPrefs :: IO ColourPrefs


System.IO.Error.catch
Language.Haskell.HsColour.Colourise
54
19
1
catch :: IO a -> (IOError -> IO a) -> IO a


val
Language.Haskell.HsColour.Colourise
55
7
1
val :: String


System.IO.readFile
Language.Haskell.HsColour.Colourise
55
14
1
readFile :: FilePath -> IO String


Language.Haskell.HsColour.Colourise.parseColourPrefs
Language.Haskell.HsColour.Colourise
56
7
1
parseColourPrefs :: String -> String -> IO ColourPrefs


val
Language.Haskell.HsColour.Colourise
56
36
1
val :: String


System.IO.Error.catch
Language.Haskell.HsColour.Colourise
57
9
1
catch :: IO a -> (IOError -> IO a) -> IO a


home
Language.Haskell.HsColour.Colourise
58
9
1
home :: String


System.Environment.getEnv
Language.Haskell.HsColour.Colourise
58
17
1
getEnv :: String -> IO String


val
Language.Haskell.HsColour.Colourise
59
9
1
val :: String


System.IO.readFile
Language.Haskell.HsColour.Colourise
59
16
1
readFile :: FilePath -> IO String


home
Language.Haskell.HsColour.Colourise
59
26
1
home :: String


GHC.Base.++
Language.Haskell.HsColour.Colourise
59
30
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.Colourise.parseColourPrefs
Language.Haskell.HsColour.Colourise
60
9
1
parseColourPrefs :: String -> String -> IO ColourPrefs


home
Language.Haskell.HsColour.Colourise
60
27
1
home :: String


GHC.Base.++
Language.Haskell.HsColour.Colourise
60
31
1
(++) :: [a] -> [a] -> [a]


val
Language.Haskell.HsColour.Colourise
60
47
1
val :: String


GHC.Base.return
Language.Haskell.HsColour.Colourise
61
11
1
return :: Monad m => forall a. a -> m a


Language.Haskell.HsColour.Colourise.defaultColourPrefs
Language.Haskell.HsColour.Colourise
61
18
1
defaultColourPrefs :: ColourPrefs


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.Colourise
65
1
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
65
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.Colourise
65
28
1
Normal :: Highlight


pref
Language.Haskell.HsColour.Colourise
66
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.comment
Language.Haskell.HsColour.Colourise
66
27
1
comment :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
66
35
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
67
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.keyword
Language.Haskell.HsColour.Colourise
67
27
1
keyword :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
67
35
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
68
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.keyglyph
Language.Haskell.HsColour.Colourise
68
27
1
keyglyph :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
68
36
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
69
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.layout
Language.Haskell.HsColour.Colourise
69
27
1
layout :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
69
34
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
70
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.conid
Language.Haskell.HsColour.Colourise
70
27
1
conid :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
70
33
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
71
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.varid
Language.Haskell.HsColour.Colourise
71
27
1
varid :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
71
33
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
72
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.conop
Language.Haskell.HsColour.Colourise
72
27
1
conop :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
72
33
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
73
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.varop
Language.Haskell.HsColour.Colourise
73
27
1
varop :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
73
33
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
74
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.string
Language.Haskell.HsColour.Colourise
74
27
1
string :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
74
34
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
75
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.char
Language.Haskell.HsColour.Colourise
75
27
1
char :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
75
32
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
76
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.number
Language.Haskell.HsColour.Colourise
76
27
1
number :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
76
34
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
77
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.cpp
Language.Haskell.HsColour.Colourise
77
27
1
cpp :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
77
31
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
78
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.selection
Language.Haskell.HsColour.Colourise
78
27
1
selection :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
78
37
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour.Colourise
79
11
1
pref :: ColourPrefs


Language.Haskell.HsColour.Colourise.definition
Language.Haskell.HsColour.Colourise
79
29
1
definition :: ColourPrefs -> [Highlight]


pref
Language.Haskell.HsColour.Colourise
79
40
1
pref :: ColourPrefs




Language.Haskell.HsColour.TTY.hscolour
Language.Haskell.HsColour.TTY
13
1
1
hscolour :: ColourPrefs -> String -> String


Language.Haskell.HsColour.TTY.hscolourG
Language.Haskell.HsColour.TTY
13
12
1
hscolourG :: TerminalType -> ColourPrefs -> String -> [Char]


Language.Haskell.HsColour.Output.Ansi16Colour
Language.Haskell.HsColour.TTY
13
22
1
Ansi16Colour :: TerminalType


Language.Haskell.HsColour.TTY.hscolourG
Language.Haskell.HsColour.TTY
16
1
1
hscolourG :: TerminalType -> ColourPrefs -> String -> [Char]


terminalType
Language.Haskell.HsColour.TTY
16
11
1
terminalType :: TerminalType


pref
Language.Haskell.HsColour.TTY
16
24
1
pref :: ColourPrefs


GHC.List.concatMap
Language.Haskell.HsColour.TTY
16
31
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.TTY.renderTokenG
Language.Haskell.HsColour.TTY
16
42
2
renderTokenG ::
  TerminalType -> ColourPrefs -> (TokenType, String) -> String


terminalType
Language.Haskell.HsColour.TTY
16
55
1
terminalType :: TerminalType


pref
Language.Haskell.HsColour.TTY
16
68
1
pref :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.TTY
16
74
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.TTY
16
76
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.TTY.renderToken
Language.Haskell.HsColour.TTY
20
1
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


Language.Haskell.HsColour.TTY.renderTokenG
Language.Haskell.HsColour.TTY
20
15
2
renderTokenG ::
  TerminalType -> ColourPrefs -> (TokenType, String) -> String


Language.Haskell.HsColour.Output.Ansi16Colour
Language.Haskell.HsColour.TTY
20
28
1
Ansi16Colour :: TerminalType


Language.Haskell.HsColour.TTY.renderTokenG
Language.Haskell.HsColour.TTY
22
1
2
renderTokenG ::
  TerminalType -> ColourPrefs -> (TokenType, String) -> String


terminalType
Language.Haskell.HsColour.TTY
22
14
1
terminalType :: TerminalType


pref
Language.Haskell.HsColour.TTY
22
27
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.TTY
22
33
1
t :: TokenType


s
Language.Haskell.HsColour.TTY
22
35
1
s :: String


Language.Haskell.HsColour.ANSI.highlightG
Language.Haskell.HsColour.TTY
22
40
1
highlightG :: TerminalType -> [Highlight] -> String -> String


terminalType
Language.Haskell.HsColour.TTY
22
56
1
terminalType :: TerminalType


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.TTY
22
70
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


pref
Language.Haskell.HsColour.TTY
22
80
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.TTY
22
85
1
t :: TokenType


s
Language.Haskell.HsColour.TTY
22
88
1
s :: String




Language.Haskell.HsColour.HTML.hscolour
Language.Haskell.HsColour.HTML
22
1
1
hscolour :: ColourPrefs -> Bool -> String -> String


pref
Language.Haskell.HsColour.HTML
22
10
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour.HTML
22
15
1
anchor :: Bool


Language.Haskell.HsColour.HTML.pre
Language.Haskell.HsColour.HTML
23
5
1
pre :: String -> String


GHC.Base..
Language.Haskell.HsColour.HTML
24
5
1
(.) :: (b -> c) -> (a -> b) -> a -> c


anchor
Language.Haskell.HsColour.HTML
24
11
1
anchor :: Bool


Language.Haskell.HsColour.HTML.renderNewLinesAnchors
Language.Haskell.HsColour.HTML
24
23
1
renderNewLinesAnchors :: String -> String


GHC.Base..
Language.Haskell.HsColour.HTML
25
23
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.List.concatMap
Language.Haskell.HsColour.HTML
25
25
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.HTML.renderAnchors
Language.Haskell.HsColour.HTML
25
36
1
renderAnchors :: (a -> String) -> Either String a -> String


Language.Haskell.HsColour.HTML.renderToken
Language.Haskell.HsColour.HTML
25
51
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.HTML
25
63
1
pref :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.HTML
26
23
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Anchors.insertAnchors
Language.Haskell.HsColour.HTML
26
25
2
insertAnchors ::
  [(TokenType, String)] -> [Either Anchor (TokenType, String)]


GHC.List.concatMap
Language.Haskell.HsColour.HTML
27
23
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.HTML.renderToken
Language.Haskell.HsColour.HTML
27
34
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.HTML
27
46
1
pref :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.HTML
28
5
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.HTML
28
7
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.HTML.top'n'tail
Language.Haskell.HsColour.HTML
31
1
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour.HTML
31
12
1
title :: String


Language.Haskell.HsColour.HTML.htmlHeader
Language.Haskell.HsColour.HTML
31
21
1
htmlHeader :: String -> String


title
Language.Haskell.HsColour.HTML
31
32
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
31
38
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.HTML
31
42
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.HTML
31
45
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.htmlClose
Language.Haskell.HsColour.HTML
31
47
1
htmlClose :: String


Language.Haskell.HsColour.HTML.pre
Language.Haskell.HsColour.HTML
34
1
1
pre :: String -> String


GHC.Base.++
Language.Haskell.HsColour.HTML
34
15
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.HTML
34
19
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.HTML
34
22
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.renderToken
Language.Haskell.HsColour.HTML
37
1
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.HTML
37
13
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.HTML
37
19
1
t :: TokenType


s
Language.Haskell.HsColour.HTML
37
21
1
s :: String


Language.Haskell.HsColour.HTML.fontify
Language.Haskell.HsColour.HTML
37
26
1
fontify :: [Highlight] -> String -> String


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.HTML
37
35
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


pref
Language.Haskell.HsColour.HTML
37
45
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.HTML
37
50
1
t :: TokenType


t
Language.Haskell.HsColour.HTML
38
30
1
t :: TokenType


GHC.Classes.==
Language.Haskell.HsColour.HTML
38
32
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.HTML
38
35
1
Comment :: TokenType


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.HTML
38
48
1
renderComment :: String -> String


s
Language.Haskell.HsColour.HTML
38
62
1
s :: String


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
38
69
1
escape :: String -> String


s
Language.Haskell.HsColour.HTML
38
76
1
s :: String


Language.Haskell.HsColour.HTML.renderAnchors
Language.Haskell.HsColour.HTML
41
1
1
renderAnchors :: (a -> String) -> Either String a -> String


v
Language.Haskell.HsColour.HTML
41
28
1
v :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
41
45
1
(++) :: [a] -> [a] -> [a]


v
Language.Haskell.HsColour.HTML
41
47
1
v :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
41
48
1
(++) :: [a] -> [a] -> [a]


render
Language.Haskell.HsColour.HTML
42
15
1
render :: a -> String


r
Language.Haskell.HsColour.HTML
42
29
1
r :: a


render
Language.Haskell.HsColour.HTML
42
34
1
render :: a -> String


r
Language.Haskell.HsColour.HTML
42
41
1
r :: a


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.HTML
47
1
1
renderComment :: String -> String


xs
Language.Haskell.HsColour.HTML
47
15
1
xs :: String


renderLink
Language.Haskell.HsColour.HTML
48
9
1
renderLink :: [Char] -> [Char]


a
Language.Haskell.HsColour.HTML
48
20
1
a :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
48
22
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.HTML
48
25
1
renderComment :: String -> String


b
Language.Haskell.HsColour.HTML
48
39
1
b :: [Char]


isUrlChar
Language.Haskell.HsColour.HTML
51
9
1
isUrlChar :: Char -> Bool


x
Language.Haskell.HsColour.HTML
51
19
1
x :: Char


GHC.Unicode.isAlphaNum
Language.Haskell.HsColour.HTML
51
23
1
isAlphaNum :: Char -> Bool


x
Language.Haskell.HsColour.HTML
51
34
1
x :: Char


GHC.Classes.||
Language.Haskell.HsColour.HTML
51
36
1
(||) :: Bool -> Bool -> Bool


x
Language.Haskell.HsColour.HTML
51
39
1
x :: Char


GHC.List.elem
Language.Haskell.HsColour.HTML
51
41
1
elem :: Eq a => a -> [a] -> Bool


a
Language.Haskell.HsColour.HTML
52
10
1
a :: [Char]


b
Language.Haskell.HsColour.HTML
52
12
1
b :: [Char]


GHC.List.span
Language.Haskell.HsColour.HTML
52
17
1
span :: (a -> Bool) -> [a] -> ([a], [a])


isUrlChar
Language.Haskell.HsColour.HTML
52
22
1
isUrlChar :: Char -> Bool


xs
Language.Haskell.HsColour.HTML
52
32
1
xs :: [Char]


renderLink
Language.Haskell.HsColour.HTML
53
9
1
renderLink :: [Char] -> [Char]


link
Language.Haskell.HsColour.HTML
53
20
1
link :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
53
40
1
(++) :: [a] -> [a] -> [a]


link
Language.Haskell.HsColour.HTML
53
43
1
link :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
53
48
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.HTML
53
57
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
53
60
1
escape :: String -> String


link
Language.Haskell.HsColour.HTML
53
67
1
link :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
53
72
1
(++) :: [a] -> [a] -> [a]


x
Language.Haskell.HsColour.HTML
55
16
1
x :: Char


xs
Language.Haskell.HsColour.HTML
55
18
1
xs :: [Char]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
55
24
1
escape :: String -> String


x
Language.Haskell.HsColour.HTML
55
32
1
x :: Char


GHC.Base.++
Language.Haskell.HsColour.HTML
55
35
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.HTML
55
38
1
renderComment :: String -> String


xs
Language.Haskell.HsColour.HTML
55
52
1
xs :: [Char]


GHC.Types.[]
Language.Haskell.HsColour.HTML
56
20
1
[] :: [a]


Language.Haskell.HsColour.HTML.renderNewLinesAnchors
Language.Haskell.HsColour.HTML
59
1
1
renderNewLinesAnchors :: String -> String


Data.List.unlines
Language.Haskell.HsColour.HTML
59
25
1
unlines :: [String] -> String


GHC.Base..
Language.Haskell.HsColour.HTML
59
33
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.map
Language.Haskell.HsColour.HTML
59
35
1
map :: (a -> b) -> [a] -> [b]


render
Language.Haskell.HsColour.HTML
59
39
1
render :: a -> String


GHC.Base..
Language.Haskell.HsColour.HTML
59
46
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.List.zip
Language.Haskell.HsColour.HTML
59
48
1
zip :: [a] -> [b] -> [(a, b)]


GHC.Base..
Language.Haskell.HsColour.HTML
59
58
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Data.List.lines
Language.Haskell.HsColour.HTML
59
60
1
lines :: String -> [String]


render
Language.Haskell.HsColour.HTML
60
11
1
render :: Show a => (a, [Char]) -> [Char]


line
Language.Haskell.HsColour.HTML
60
19
1
line :: a


s
Language.Haskell.HsColour.HTML
60
25
1
s :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
60
48
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.HTML
60
51
1
show :: Show a => a -> String


line
Language.Haskell.HsColour.HTML
60
56
1
line :: a


GHC.Base.++
Language.Haskell.HsColour.HTML
60
61
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.HTML
60
74
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
60
77
1
s :: String


Language.Haskell.HsColour.HTML.fontify
Language.Haskell.HsColour.HTML
64
1
1
fontify :: [Highlight] -> String -> String


s
Language.Haskell.HsColour.HTML
64
12
1
s :: String


s
Language.Haskell.HsColour.HTML
64
20
1
s :: String


h
Language.Haskell.HsColour.HTML
65
10
1
h :: Highlight


hs
Language.Haskell.HsColour.HTML
65
12
1
hs :: [Highlight]


s
Language.Haskell.HsColour.HTML
65
16
1
s :: String


Language.Haskell.HsColour.HTML.font
Language.Haskell.HsColour.HTML
65
20
1
font :: Highlight -> String -> String


h
Language.Haskell.HsColour.HTML
65
25
1
h :: Highlight


Language.Haskell.HsColour.HTML.fontify
Language.Haskell.HsColour.HTML
65
28
1
fontify :: [Highlight] -> String -> String


hs
Language.Haskell.HsColour.HTML
65
36
1
hs :: [Highlight]


s
Language.Haskell.HsColour.HTML
65
39
1
s :: String


Language.Haskell.HsColour.HTML.font
Language.Haskell.HsColour.HTML
68
1
1
font :: Highlight -> String -> String


s
Language.Haskell.HsColour.HTML
68
21
1
s :: String


s
Language.Haskell.HsColour.HTML
68
25
1
s :: String


s
Language.Haskell.HsColour.HTML
69
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
69
30
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
69
32
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
69
33
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
70
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
70
31
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
70
33
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
70
34
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
71
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
71
30
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
71
32
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
71
33
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
72
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
72
34
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
72
36
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
72
37
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
73
21
1
s :: String


s
Language.Haskell.HsColour.HTML
73
25
1
s :: String


s
Language.Haskell.HsColour.HTML
74
21
1
s :: String


s
Language.Haskell.HsColour.HTML
74
25
1
s :: String


r
Language.Haskell.HsColour.HTML
75
23
1
r :: Word8


g
Language.Haskell.HsColour.HTML
75
25
1
g :: Word8


b
Language.Haskell.HsColour.HTML
75
27
1
b :: Word8


s
Language.Haskell.HsColour.HTML
75
31
1
s :: String


Text.Printf.printf
Language.Haskell.HsColour.HTML
75
35
1
printf :: PrintfType r => String -> r


r
Language.Haskell.HsColour.HTML
75
86
1
r :: a


g
Language.Haskell.HsColour.HTML
75
88
1
g :: Word8


b
Language.Haskell.HsColour.HTML
75
90
1
b :: [Char]


s
Language.Haskell.HsColour.HTML
75
92
1
s :: String


r
Language.Haskell.HsColour.HTML
76
23
1
r :: Word8


g
Language.Haskell.HsColour.HTML
76
25
1
g :: Word8


b
Language.Haskell.HsColour.HTML
76
27
1
b :: Word8


s
Language.Haskell.HsColour.HTML
76
31
1
s :: String


Text.Printf.printf
Language.Haskell.HsColour.HTML
76
35
1
printf :: PrintfType r => String -> r


r
Language.Haskell.HsColour.HTML
76
86
1
r :: a


g
Language.Haskell.HsColour.HTML
76
88
1
g :: Word8


b
Language.Haskell.HsColour.HTML
76
90
1
b :: [Char]


s
Language.Haskell.HsColour.HTML
76
92
1
s :: String


c
Language.Haskell.HsColour.HTML
77
18
1
c :: Colour


s
Language.Haskell.HsColour.HTML
77
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
77
41
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.HTML
77
43
1
show :: Show a => a -> String


c
Language.Haskell.HsColour.HTML
77
48
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.HTML
77
49
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.HTML
77
54
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
77
56
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
77
57
1
(++) :: [a] -> [a] -> [a]


c
Language.Haskell.HsColour.HTML
78
18
1
c :: Colour


s
Language.Haskell.HsColour.HTML
78
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
78
41
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.HTML
78
43
1
show :: Show a => a -> String


c
Language.Haskell.HsColour.HTML
78
48
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.HTML
78
49
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.HTML
78
54
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
78
56
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
78
57
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
79
21
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
79
30
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.HTML
79
32
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
79
33
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
82
1
1
escape :: String -> String


cs
Language.Haskell.HsColour.HTML
82
13
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
82
25
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
82
27
1
escape :: String -> String


cs
Language.Haskell.HsColour.HTML
82
34
1
cs :: [Char]


cs
Language.Haskell.HsColour.HTML
83
13
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
83
25
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
83
27
1
escape :: String -> String


cs
Language.Haskell.HsColour.HTML
83
34
1
cs :: [Char]


cs
Language.Haskell.HsColour.HTML
84
13
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.HTML
84
26
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
84
28
1
escape :: String -> String


cs
Language.Haskell.HsColour.HTML
84
35
1
cs :: [Char]


c
Language.Haskell.HsColour.HTML
85
9
1
c :: Char


cs
Language.Haskell.HsColour.HTML
85
11
1
cs :: [Char]


c
Language.Haskell.HsColour.HTML
85
19
1
c :: Colour


GHC.Types.:
Language.Haskell.HsColour.HTML
85
20
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.HTML
85
22
1
escape :: String -> String


cs
Language.Haskell.HsColour.HTML
85
29
1
cs :: [Char]


GHC.Types.[]
Language.Haskell.HsColour.HTML
86
19
1
[] :: [a]


Language.Haskell.HsColour.HTML.htmlHeader
Language.Haskell.HsColour.HTML
89
1
1
htmlHeader :: String -> String


title
Language.Haskell.HsColour.HTML
89
12
1
title :: String


Data.List.unlines
Language.Haskell.HsColour.HTML
89
20
1
unlines :: [String] -> String


GHC.Base.++
Language.Haskell.HsColour.HTML
94
14
1
(++) :: [a] -> [a] -> [a]


title
Language.Haskell.HsColour.HTML
94
16
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.HTML
94
21
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.HTML.htmlClose
Language.Haskell.HsColour.HTML
99
1
1
htmlClose :: String




Language.Haskell.HsColour.CSS.hscolour
Language.Haskell.HsColour.CSS
19
1
1
hscolour :: Bool -> String -> String


anchor
Language.Haskell.HsColour.CSS
19
10
1
anchor :: Bool


Language.Haskell.HsColour.CSS.pre
Language.Haskell.HsColour.CSS
20
3
1
pre :: String -> String


GHC.Base..
Language.Haskell.HsColour.CSS
21
3
1
(.) :: (b -> c) -> (a -> b) -> a -> c


anchor
Language.Haskell.HsColour.CSS
21
9
1
anchor :: Bool


Language.Haskell.HsColour.HTML.renderNewLinesAnchors
Language.Haskell.HsColour.CSS
22
14
1
renderNewLinesAnchors :: String -> String


GHC.Base..
Language.Haskell.HsColour.CSS
23
14
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.List.concatMap
Language.Haskell.HsColour.CSS
23
16
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.HTML.renderAnchors
Language.Haskell.HsColour.CSS
23
27
1
renderAnchors :: (a -> String) -> Either String a -> String


Language.Haskell.HsColour.CSS.renderToken
Language.Haskell.HsColour.CSS
23
41
1
renderToken :: (TokenType, String) -> String


GHC.Base..
Language.Haskell.HsColour.CSS
24
14
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Anchors.insertAnchors
Language.Haskell.HsColour.CSS
24
16
2
insertAnchors ::
  [(TokenType, String)] -> [Either Anchor (TokenType, String)]


GHC.List.concatMap
Language.Haskell.HsColour.CSS
25
14
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.CSS.renderToken
Language.Haskell.HsColour.CSS
25
24
1
renderToken :: (TokenType, String) -> String


GHC.Base..
Language.Haskell.HsColour.CSS
26
3
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.CSS
26
5
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.CSS.top'n'tail
Language.Haskell.HsColour.CSS
29
1
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour.CSS
29
12
1
title :: String


Language.Haskell.HsColour.CSS.cssPrefix
Language.Haskell.HsColour.CSS
29
22
1
cssPrefix :: [Char] -> String


title
Language.Haskell.HsColour.CSS
29
32
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.CSS
29
38
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.CSS
29
42
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.CSS
29
45
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.CSS.cssSuffix
Language.Haskell.HsColour.CSS
29
47
1
cssSuffix :: String


Language.Haskell.HsColour.CSS.pre
Language.Haskell.HsColour.CSS
32
1
1
pre :: String -> String


GHC.Base.++
Language.Haskell.HsColour.CSS
32
15
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.CSS
32
19
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.CSS
32
22
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.CSS.renderToken
Language.Haskell.HsColour.CSS
35
1
1
renderToken :: (TokenType, String) -> String


cls
Language.Haskell.HsColour.CSS
35
14
1
cls :: TokenType


text
Language.Haskell.HsColour.CSS
35
18
1
text :: String


before
Language.Haskell.HsColour.CSS
36
9
1
before :: [Char]


GHC.Base.++
Language.Haskell.HsColour.CSS
36
16
1
(++) :: [a] -> [a] -> [a]


cls
Language.Haskell.HsColour.CSS
36
23
1
cls :: TokenType


GHC.Classes.==
Language.Haskell.HsColour.CSS
36
27
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.CSS
36
30
1
Comment :: TokenType


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.CSS
36
43
1
renderComment :: String -> String


text
Language.Haskell.HsColour.CSS
36
57
1
text :: String


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.CSS
36
67
1
escape :: String -> String


text
Language.Haskell.HsColour.CSS
36
74
1
text :: String


GHC.Base.++
Language.Haskell.HsColour.CSS
36
80
1
(++) :: [a] -> [a] -> [a]


after
Language.Haskell.HsColour.CSS
36
83
1
after :: [Char]


before
Language.Haskell.HsColour.CSS
38
9
1
before :: [Char]


GHC.List.null
Language.Haskell.HsColour.CSS
38
21
1
null :: [a] -> Bool


cls2
Language.Haskell.HsColour.CSS
38
26
1
cls2 :: [Char]


GHC.Base.++
Language.Haskell.HsColour.CSS
38
60
1
(++) :: [a] -> [a] -> [a]


cls2
Language.Haskell.HsColour.CSS
38
63
1
cls2 :: [Char]


GHC.Base.++
Language.Haskell.HsColour.CSS
38
68
1
(++) :: [a] -> [a] -> [a]


after
Language.Haskell.HsColour.CSS
39
9
1
after :: [Char]


GHC.List.null
Language.Haskell.HsColour.CSS
39
21
1
null :: [a] -> Bool


cls2
Language.Haskell.HsColour.CSS
39
26
1
cls2 :: [Char]


cls2
Language.Haskell.HsColour.CSS
40
9
1
cls2 :: [Char]


Language.Haskell.HsColour.CSS.cssClass
Language.Haskell.HsColour.CSS
40
16
1
cssClass :: TokenType -> [Char]


cls
Language.Haskell.HsColour.CSS
40
25
1
cls :: TokenType


Language.Haskell.HsColour.CSS.cssClass
Language.Haskell.HsColour.CSS
43
1
1
cssClass :: TokenType -> [Char]


Language.Haskell.HsColour.CSS.cssPrefix
Language.Haskell.HsColour.CSS
60
1
1
cssPrefix :: [Char] -> String


title
Language.Haskell.HsColour.CSS
60
11
1
title :: [Char]


Data.List.unlines
Language.Haskell.HsColour.CSS
60
19
1
unlines :: [String] -> String


GHC.Base.++
Language.Haskell.HsColour.CSS
66
15
1
(++) :: [a] -> [a] -> [a]


title
Language.Haskell.HsColour.CSS
66
17
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.CSS
66
22
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.CSS.cssSuffix
Language.Haskell.HsColour.CSS
72
1
1
cssSuffix :: String


Data.List.unlines
Language.Haskell.HsColour.CSS
72
13
1
unlines :: [String] -> String




Language.Haskell.HsColour.ACSS.Ann
Language.Haskell.HsColour.ACSS
24
18
1
Ann :: Map Loc (String, String) -> AnnMap


Language.Haskell.HsColour.ACSS.L
Language.Haskell.HsColour.ACSS
25
18
1
L :: (Int, Int) -> Loc


GHC.Classes.D:Eq
Language.Haskell.HsColour.ACSS
25
41
1
D:Eq :: (a -> a -> Bool) -> (a -> a -> Bool) -> T:Eq a


GHC.Classes.D:Ord
Language.Haskell.HsColour.ACSS
25
45
10
D:Ord ::
  Eq a =>
  (a -> a -> Ordering)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> Bool)
  -> (a -> a -> a)
  -> (a -> a -> a)
  -> T:Ord a


GHC.Show.D:Show
Language.Haskell.HsColour.ACSS
25
50
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


Language.Haskell.HsColour.ACSS.hscolour
Language.Haskell.HsColour.ACSS
32
1
1
hscolour :: Bool -> String -> String


anchor
Language.Haskell.HsColour.ACSS
32
10
1
anchor :: Bool


Language.Haskell.HsColour.ACSS.hsannot
Language.Haskell.HsColour.ACSS
32
19
1
hsannot :: Bool -> (String, AnnMap) -> String


anchor
Language.Haskell.HsColour.ACSS
32
27
1
anchor :: Bool


GHC.Base..
Language.Haskell.HsColour.ACSS
32
34
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.ACSS.splitSrcAndAnns
Language.Haskell.HsColour.ACSS
32
36
1
splitSrcAndAnns :: String -> (String, AnnMap)


Language.Haskell.HsColour.ACSS.hsannot
Language.Haskell.HsColour.ACSS
39
1
1
hsannot :: Bool -> (String, AnnMap) -> String


anchor
Language.Haskell.HsColour.ACSS
39
9
1
anchor :: Bool


Language.Haskell.HsColour.CSS.pre
Language.Haskell.HsColour.ACSS
40
5
1
pre :: String -> String


GHC.Base..
Language.Haskell.HsColour.ACSS
41
5
1
(.) :: (b -> c) -> (a -> b) -> a -> c


anchor
Language.Haskell.HsColour.ACSS
41
11
1
anchor :: Bool


GHC.List.concatMap
Language.Haskell.HsColour.ACSS
42
23
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.HTML.renderAnchors
Language.Haskell.HsColour.ACSS
42
34
1
renderAnchors :: (a -> String) -> Either String a -> String


Language.Haskell.HsColour.ACSS.renderAnnotToken
Language.Haskell.HsColour.ACSS
42
48
1
renderAnnotToken :: (TokenType, String, Maybe String) -> String


GHC.Base..
Language.Haskell.HsColour.ACSS
43
23
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.ACSS.insertAnnotAnchors
Language.Haskell.HsColour.ACSS
43
25
2
insertAnnotAnchors ::
  [(TokenType, String, a)] -> [Either String (TokenType, String, a)]


GHC.List.concatMap
Language.Haskell.HsColour.ACSS
44
23
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.ACSS.renderAnnotToken
Language.Haskell.HsColour.ACSS
44
33
1
renderAnnotToken :: (TokenType, String, Maybe String) -> String


GHC.Base..
Language.Haskell.HsColour.ACSS
45
5
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.ACSS.annotTokenise
Language.Haskell.HsColour.ACSS
45
7
2
annotTokenise ::
  (String, AnnMap) -> [(TokenType, String, Maybe String)]


Language.Haskell.HsColour.ACSS.annotTokenise
Language.Haskell.HsColour.ACSS
48
1
2
annotTokenise ::
  (String, AnnMap) -> [(TokenType, String, Maybe String)]


src
Language.Haskell.HsColour.ACSS
48
16
1
src :: String


annm
Language.Haskell.HsColour.ACSS
48
25
1
annm :: Map Loc (String, String)


GHC.List.zipWith
Language.Haskell.HsColour.ACSS
49
5
1
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]


x
Language.Haskell.HsColour.ACSS
49
16
1
x :: TokenType


y
Language.Haskell.HsColour.ACSS
49
18
1
y :: String


z
Language.Haskell.HsColour.ACSS
49
21
1
z :: Maybe (String, String)


x
Language.Haskell.HsColour.ACSS
49
27
1
x :: [Char]


y
Language.Haskell.HsColour.ACSS
49
29
1
y :: String


Data.Tuple.snd
Language.Haskell.HsColour.ACSS
49
32
1
snd :: (a, b) -> b


GHC.Base.fmap
Language.Haskell.HsColour.ACSS
49
36
1
fmap :: Functor f => forall a b. (a -> b) -> f a -> f b


z
Language.Haskell.HsColour.ACSS
49
43
1
z :: Maybe (String, String)


toks
Language.Haskell.HsColour.ACSS
49
47
1
toks :: [(TokenType, String)]


annots
Language.Haskell.HsColour.ACSS
49
52
1
annots :: [Maybe (String, String)]


toks
Language.Haskell.HsColour.ACSS
50
9
1
toks :: [(TokenType, String)]


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.ACSS
50
22
1
tokenise :: String -> [(TokenType, String)]


src
Language.Haskell.HsColour.ACSS
50
31
1
src :: String


spans
Language.Haskell.HsColour.ACSS
51
9
1
spans :: [Loc]


Language.Haskell.HsColour.ACSS.tokenSpans
Language.Haskell.HsColour.ACSS
51
22
1
tokenSpans :: [String] -> [Loc]


GHC.Base.$
Language.Haskell.HsColour.ACSS
51
33
1
($) :: (a -> b) -> a -> b


GHC.Base.map
Language.Haskell.HsColour.ACSS
51
35
1
map :: (a -> b) -> [a] -> [b]


Data.Tuple.snd
Language.Haskell.HsColour.ACSS
51
39
1
snd :: (a, b) -> b


toks
Language.Haskell.HsColour.ACSS
51
43
1
toks :: [(TokenType, String)]


annots
Language.Haskell.HsColour.ACSS
52
9
1
annots :: [Maybe (String, String)]


GHC.Base.map
Language.Haskell.HsColour.ACSS
52
22
1
map :: (a -> b) -> [a] -> [b]


Data.Map.lookup
Language.Haskell.HsColour.ACSS
52
27
1
lookup :: Ord k => k -> Map k a -> Maybe a


annm
Language.Haskell.HsColour.ACSS
52
38
1
annm :: Map Loc (String, String)


spans
Language.Haskell.HsColour.ACSS
52
44
1
spans :: [Loc]


Language.Haskell.HsColour.ACSS.tokenSpans
Language.Haskell.HsColour.ACSS
55
1
1
tokenSpans :: [String] -> [Loc]


GHC.List.scanl
Language.Haskell.HsColour.ACSS
55
14
1
scanl :: (a -> b -> a) -> a -> [b] -> [a]


Language.Haskell.HsColour.ACSS.plusLoc
Language.Haskell.HsColour.ACSS
55
20
1
plusLoc :: Loc -> String -> Loc


Language.Haskell.HsColour.ACSS.L
Language.Haskell.HsColour.ACSS
55
29
1
L :: (Int, Int) -> Loc


Language.Haskell.HsColour.ACSS.plusLoc
Language.Haskell.HsColour.ACSS
58
1
1
plusLoc :: Loc -> String -> Loc


l
Language.Haskell.HsColour.ACSS
58
13
1
l :: Int


c
Language.Haskell.HsColour.ACSS
58
16
1
c :: Int


s
Language.Haskell.HsColour.ACSS
58
20
1
s :: String


Data.List.elemIndices
Language.Haskell.HsColour.ACSS
59
15
1
elemIndices :: Eq a => a -> [a] -> [Int]


s
Language.Haskell.HsColour.ACSS
59
29
1
s :: String


Language.Haskell.HsColour.ACSS.L
Language.Haskell.HsColour.ACSS
60
13
1
L :: (Int, Int) -> Loc


l
Language.Haskell.HsColour.ACSS
60
16
1
l :: Int


c
Language.Haskell.HsColour.ACSS
60
20
1
c :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
60
22
1
(+) :: Num a => a -> a -> a


n
Language.Haskell.HsColour.ACSS
60
24
1
n :: Int


is
Language.Haskell.HsColour.ACSS
61
7
1
is :: [Int]


Language.Haskell.HsColour.ACSS.L
Language.Haskell.HsColour.ACSS
61
13
1
L :: (Int, Int) -> Loc


l
Language.Haskell.HsColour.ACSS
61
17
1
l :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
61
19
1
(+) :: Num a => a -> a -> a


GHC.List.length
Language.Haskell.HsColour.ACSS
61
21
1
length :: [a] -> Int


is
Language.Haskell.HsColour.ACSS
61
28
1
is :: [Int]


n
Language.Haskell.HsColour.ACSS
61
34
1
n :: Int


GHC.Num.-
Language.Haskell.HsColour.ACSS
61
36
1
(-) :: Num a => a -> a -> a


Data.List.maximum
Language.Haskell.HsColour.ACSS
61
38
1
maximum :: Ord a => [a] -> a


is
Language.Haskell.HsColour.ACSS
61
46
1
is :: [Int]


n
Language.Haskell.HsColour.ACSS
62
11
1
n :: Int


GHC.List.length
Language.Haskell.HsColour.ACSS
62
15
1
length :: [a] -> Int


s
Language.Haskell.HsColour.ACSS
62
22
1
s :: String


Language.Haskell.HsColour.ACSS.renderAnnotToken
Language.Haskell.HsColour.ACSS
65
1
1
renderAnnotToken :: (TokenType, String, Maybe String) -> String


x
Language.Haskell.HsColour.ACSS
65
19
1
x :: TokenType


y
Language.Haskell.HsColour.ACSS
65
21
1
y :: String


Language.Haskell.HsColour.CSS.renderToken
Language.Haskell.HsColour.ACSS
66
5
1
renderToken :: (TokenType, String) -> String


x
Language.Haskell.HsColour.ACSS
66
22
1
x :: [Char]


y
Language.Haskell.HsColour.ACSS
66
25
1
y :: String


x
Language.Haskell.HsColour.ACSS
67
19
1
x :: TokenType


y
Language.Haskell.HsColour.ACSS
67
21
1
y :: String


ann
Language.Haskell.HsColour.ACSS
67
29
1
ann :: String


Text.Printf.printf
Language.Haskell.HsColour.ACSS
68
5
1
printf :: PrintfType r => String -> r


template
Language.Haskell.HsColour.ACSS
68
12
1
template :: [Char]


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.ACSS
68
22
1
escape :: String -> String


ann
Language.Haskell.HsColour.ACSS
68
29
1
ann :: String


Language.Haskell.HsColour.CSS.renderToken
Language.Haskell.HsColour.ACSS
68
35
1
renderToken :: (TokenType, String) -> String


x
Language.Haskell.HsColour.ACSS
68
52
1
x :: [Char]


y
Language.Haskell.HsColour.ACSS
68
55
1
y :: String


template
Language.Haskell.HsColour.ACSS
69
11
1
template :: [Char]


Language.Haskell.HsColour.ACSS.insertAnnotAnchors
Language.Haskell.HsColour.ACSS
78
1
2
insertAnnotAnchors ::
  [(TokenType, String, a)] -> [Either String (TokenType, String, a)]


toks
Language.Haskell.HsColour.ACSS
78
20
1
toks :: [(TokenType, String, a)]


Language.Haskell.HsColour.ACSS.stitch
Language.Haskell.HsColour.ACSS
79
5
1
stitch :: Eq b => [(b, c)] -> [Either a b] -> [Either a c]


GHC.List.zip
Language.Haskell.HsColour.ACSS
79
13
1
zip :: [a] -> [b] -> [(a, b)]


toks'
Language.Haskell.HsColour.ACSS
79
17
1
toks' :: [(TokenType, String)]


toks
Language.Haskell.HsColour.ACSS
79
23
1
toks :: [(TokenType, String)]


GHC.Base.$
Language.Haskell.HsColour.ACSS
79
29
1
($) :: (a -> b) -> a -> b


Language.Haskell.HsColour.Anchors.insertAnchors
Language.Haskell.HsColour.ACSS
79
31
2
insertAnchors ::
  [(TokenType, String)] -> [Either Anchor (TokenType, String)]


toks'
Language.Haskell.HsColour.ACSS
79
45
1
toks' :: [(TokenType, String)]


toks'
Language.Haskell.HsColour.ACSS
80
9
1
toks' :: [(TokenType, String)]


x
Language.Haskell.HsColour.ACSS
80
19
1
x :: [Char]


y
Language.Haskell.HsColour.ACSS
80
21
1
y :: String


x
Language.Haskell.HsColour.ACSS
80
27
1
x :: TokenType


y
Language.Haskell.HsColour.ACSS
80
29
1
y :: String


toks
Language.Haskell.HsColour.ACSS
80
37
1
toks :: [(TokenType, String)]


Language.Haskell.HsColour.ACSS.stitch
Language.Haskell.HsColour.ACSS
83
1
1
stitch :: Eq b => [(b, c)] -> [Either a b] -> [Either a c]


xys
Language.Haskell.HsColour.ACSS
83
8
1
xys :: [(b, c)]


a
Language.Haskell.HsColour.ACSS
83
19
1
a :: a


rest
Language.Haskell.HsColour.ACSS
83
24
1
rest :: [Either a b]


Data.Either.Left
Language.Haskell.HsColour.ACSS
84
6
1
Left :: a -> Either a b


a
Language.Haskell.HsColour.ACSS
84
11
1
a :: Int


GHC.Types.:
Language.Haskell.HsColour.ACSS
84
14
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.ACSS.stitch
Language.Haskell.HsColour.ACSS
84
16
1
stitch :: Eq b => [(b, c)] -> [Either a b] -> [Either a c]


xys
Language.Haskell.HsColour.ACSS
84
23
1
xys :: [(b, c)]


rest
Language.Haskell.HsColour.ACSS
84
27
1
rest :: [Either a b]


x
Language.Haskell.HsColour.ACSS
85
10
1
x :: b


y
Language.Haskell.HsColour.ACSS
85
12
1
y :: c


xys
Language.Haskell.HsColour.ACSS
85
15
1
xys :: [(b, c)]


x'
Language.Haskell.HsColour.ACSS
85
28
1
x' :: b


rest
Language.Haskell.HsColour.ACSS
85
32
1
rest :: [Either a b]


x
Language.Haskell.HsColour.ACSS
86
5
1
x :: [Char]


GHC.Classes.==
Language.Haskell.HsColour.ACSS
86
7
1
(==) :: Eq a => a -> a -> Bool


x'
Language.Haskell.HsColour.ACSS
86
10
1
x' :: b


Data.Either.Right
Language.Haskell.HsColour.ACSS
87
6
1
Right :: b -> Either a b


y
Language.Haskell.HsColour.ACSS
87
12
1
y :: String


GHC.Types.:
Language.Haskell.HsColour.ACSS
87
15
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.ACSS.stitch
Language.Haskell.HsColour.ACSS
87
17
1
stitch :: Eq b => [(b, c)] -> [Either a b] -> [Either a c]


xys
Language.Haskell.HsColour.ACSS
87
24
1
xys :: [(b, c)]


rest
Language.Haskell.HsColour.ACSS
87
28
1
rest :: [Either a b]


GHC.Base.otherwise
Language.Haskell.HsColour.ACSS
88
5
1
otherwise :: Bool


GHC.Err.error
Language.Haskell.HsColour.ACSS
89
5
1
error :: [Char] -> a


GHC.Types.[]
Language.Haskell.HsColour.ACSS
91
5
1
[] :: [a]


Language.Haskell.HsColour.ACSS.splitSrcAndAnns
Language.Haskell.HsColour.ACSS
95
1
1
splitSrcAndAnns :: String -> (String, AnnMap)


s
Language.Haskell.HsColour.ACSS
95
17
1
s :: String


ls
Language.Haskell.HsColour.ACSS
96
7
1
ls :: [String]


Data.List.lines
Language.Haskell.HsColour.ACSS
96
12
1
lines :: String -> [String]


s
Language.Haskell.HsColour.ACSS
96
18
1
s :: String


Data.List.findIndex
Language.Haskell.HsColour.ACSS
97
8
1
findIndex :: (a -> Bool) -> [a] -> Maybe Int


Language.Haskell.HsColour.ACSS.breakS
Language.Haskell.HsColour.ACSS
97
19
1
breakS :: [Char]


GHC.Classes.==
Language.Haskell.HsColour.ACSS
97
26
1
(==) :: Eq a => a -> a -> Bool


ls
Language.Haskell.HsColour.ACSS
97
30
1
ls :: [String]


s
Language.Haskell.HsColour.ACSS
98
17
1
s :: String


Language.Haskell.HsColour.ACSS.Ann
Language.Haskell.HsColour.ACSS
98
20
1
Ann :: Map Loc (String, String) -> AnnMap


Data.Map.empty
Language.Haskell.HsColour.ACSS
98
24
1
empty :: Map k a


i
Language.Haskell.HsColour.ACSS
99
10
1
i :: Int


src
Language.Haskell.HsColour.ACSS
99
17
1
src :: String


ann
Language.Haskell.HsColour.ACSS
99
57
1
ann :: String


codes
Language.Haskell.HsColour.ACSS
100
23
1
codes :: [String]


mname
Language.Haskell.HsColour.ACSS
100
32
1
mname :: String


annots
Language.Haskell.HsColour.ACSS
100
38
1
annots :: [String]


GHC.List.splitAt
Language.Haskell.HsColour.ACSS
100
48
1
splitAt :: Int -> [a] -> ([a], [a])


i
Language.Haskell.HsColour.ACSS
100
56
1
i :: Int


ls
Language.Haskell.HsColour.ACSS
100
58
1
ls :: [String]


ann
Language.Haskell.HsColour.ACSS
101
22
1
ann :: AnnMap


Language.Haskell.HsColour.ACSS.annotParse
Language.Haskell.HsColour.ACSS
101
30
1
annotParse :: String -> String -> AnnMap


mname
Language.Haskell.HsColour.ACSS
101
41
1
mname :: String


GHC.Base.$
Language.Haskell.HsColour.ACSS
101
47
1
($) :: (a -> b) -> a -> b


GHC.List.dropWhile
Language.Haskell.HsColour.ACSS
101
49
1
dropWhile :: (a -> Bool) -> [a] -> [a]


GHC.Unicode.isSpace
Language.Haskell.HsColour.ACSS
101
59
1
isSpace :: Char -> Bool


GHC.Base.$
Language.Haskell.HsColour.ACSS
101
67
1
($) :: (a -> b) -> a -> b


Data.List.unlines
Language.Haskell.HsColour.ACSS
101
69
1
unlines :: [String] -> String


annots
Language.Haskell.HsColour.ACSS
101
77
1
annots :: [Maybe (String, String)]


src
Language.Haskell.HsColour.ACSS
102
22
1
src :: String


Data.List.unlines
Language.Haskell.HsColour.ACSS
102
30
1
unlines :: [String] -> String


codes
Language.Haskell.HsColour.ACSS
102
38
1
codes :: [String]


Language.Haskell.HsColour.ACSS.srcModuleName
Language.Haskell.HsColour.ACSS
106
1
1
srcModuleName :: String -> String


Data.Maybe.fromMaybe
Language.Haskell.HsColour.ACSS
106
17
1
fromMaybe :: a -> Maybe a -> a


GHC.Base..
Language.Haskell.HsColour.ACSS
106
34
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.ACSS.tokenModule
Language.Haskell.HsColour.ACSS
106
36
1
tokenModule :: [(TokenType, [Char])] -> Maybe [Char]


GHC.Base..
Language.Haskell.HsColour.ACSS
106
48
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.ACSS
106
50
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.ACSS.tokenModule
Language.Haskell.HsColour.ACSS
108
1
1
tokenModule :: [(TokenType, [Char])] -> Maybe [Char]


toks
Language.Haskell.HsColour.ACSS
108
13
1
toks :: [(TokenType, [Char])]


i
Language.Haskell.HsColour.ACSS
109
8
1
i :: Int


Data.List.findIndex
Language.Haskell.HsColour.ACSS
109
13
1
findIndex :: (a -> Bool) -> [a] -> Maybe Int


Language.Haskell.HsColour.Classify.Keyword
Language.Haskell.HsColour.ACSS
109
25
1
Keyword :: TokenType


GHC.Classes.==
Language.Haskell.HsColour.ACSS
109
44
1
(==) :: Eq a => a -> a -> Bool


toks
Language.Haskell.HsColour.ACSS
109
48
1
toks :: [(TokenType, String)]


toks'
Language.Haskell.HsColour.ACSS
110
16
1
toks' :: [(TokenType, [Char])]


GHC.List.splitAt
Language.Haskell.HsColour.ACSS
110
26
1
splitAt :: Int -> [a] -> ([a], [a])


i
Language.Haskell.HsColour.ACSS
110
35
1
i :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
110
36
1
(+) :: Num a => a -> a -> a


toks
Language.Haskell.HsColour.ACSS
110
40
1
toks :: [(TokenType, String)]


j
Language.Haskell.HsColour.ACSS
111
8
1
j :: Int


Data.List.findIndex
Language.Haskell.HsColour.ACSS
111
13
1
findIndex :: (a -> Bool) -> [a] -> Maybe Int


Language.Haskell.HsColour.Classify.Space
Language.Haskell.HsColour.ACSS
111
25
1
Space :: TokenType


GHC.Classes.==
Language.Haskell.HsColour.ACSS
111
31
1
(==) :: Eq a => a -> a -> Bool


GHC.Base..
Language.Haskell.HsColour.ACSS
111
35
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Data.Tuple.fst
Language.Haskell.HsColour.ACSS
111
37
1
fst :: (a, b) -> a


toks'
Language.Haskell.HsColour.ACSS
111
42
1
toks' :: [(TokenType, String)]


toks''
Language.Haskell.HsColour.ACSS
112
13
1
toks'' :: [(TokenType, [Char])]


GHC.List.splitAt
Language.Haskell.HsColour.ACSS
112
26
1
splitAt :: Int -> [a] -> ([a], [a])


j
Language.Haskell.HsColour.ACSS
112
34
1
j :: Int


toks'
Language.Haskell.HsColour.ACSS
112
36
1
toks' :: [(TokenType, String)]


GHC.Base.return
Language.Haskell.HsColour.ACSS
113
8
1
return :: Monad m => forall a. a -> m a


GHC.Base.$
Language.Haskell.HsColour.ACSS
113
15
1
($) :: (a -> b) -> a -> b


GHC.List.concatMap
Language.Haskell.HsColour.ACSS
113
17
1
concatMap :: (a -> [b]) -> [a] -> [b]


Data.Tuple.snd
Language.Haskell.HsColour.ACSS
113
27
1
snd :: (a, b) -> b


toks''
Language.Haskell.HsColour.ACSS
113
31
1
toks'' :: [(TokenType, [Char])]


Language.Haskell.HsColour.ACSS.breakS
Language.Haskell.HsColour.ACSS
115
1
1
breakS :: [Char]


Language.Haskell.HsColour.ACSS.annotParse
Language.Haskell.HsColour.ACSS
118
1
1
annotParse :: String -> String -> AnnMap


mname
Language.Haskell.HsColour.ACSS
118
12
1
mname :: String


Language.Haskell.HsColour.ACSS.Ann
Language.Haskell.HsColour.ACSS
118
20
1
Ann :: Map Loc (String, String) -> AnnMap


GHC.Base..
Language.Haskell.HsColour.ACSS
118
24
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Data.Map.fromList
Language.Haskell.HsColour.ACSS
118
26
1
fromList :: Ord k => [(k, a)] -> Map k a


GHC.Base..
Language.Haskell.HsColour.ACSS
118
37
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.ACSS.parseLines
Language.Haskell.HsColour.ACSS
118
39
2
parseLines ::
  [Char] -> Int -> [[Char]] -> [(Loc, ([Char], [Char]))]


mname
Language.Haskell.HsColour.ACSS
118
50
1
mname :: String


GHC.Base..
Language.Haskell.HsColour.ACSS
118
58
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Data.List.lines
Language.Haskell.HsColour.ACSS
118
60
1
lines :: String -> [String]


Language.Haskell.HsColour.ACSS.parseLines
Language.Haskell.HsColour.ACSS
120
1
2
parseLines ::
  [Char] -> Int -> [[Char]] -> [(Loc, ([Char], [Char]))]


mname
Language.Haskell.HsColour.ACSS
120
12
1
mname :: [Char]


i
Language.Haskell.HsColour.ACSS
120
18
1
i :: Int


GHC.Types.[]
Language.Haskell.HsColour.ACSS
121
5
1
[] :: [a]


mname
Language.Haskell.HsColour.ACSS
122
12
1
mname :: [Char]


i
Language.Haskell.HsColour.ACSS
122
18
1
i :: Int


ls
Language.Haskell.HsColour.ACSS
122
24
1
ls :: [[Char]]


parseLines
Language.Haskell.HsColour.ACSS
123
5
2
parseLines ::
  [Char] -> Int -> [[Char]] -> [(Loc, ([Char], [Char]))]


mname
Language.Haskell.HsColour.ACSS
123
16
1
mname :: String


i
Language.Haskell.HsColour.ACSS
123
23
1
i :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
123
24
1
(+) :: Num a => a -> a -> a


ls
Language.Haskell.HsColour.ACSS
123
28
1
ls :: [String]


mname
Language.Haskell.HsColour.ACSS
124
12
1
mname :: [Char]


i
Language.Haskell.HsColour.ACSS
124
18
1
i :: Int


x
Language.Haskell.HsColour.ACSS
124
21
1
x :: [Char]


f
Language.Haskell.HsColour.ACSS
124
23
1
f :: [Char]


l
Language.Haskell.HsColour.ACSS
124
25
1
l :: [Char]


c
Language.Haskell.HsColour.ACSS
124
27
1
c :: [Char]


n
Language.Haskell.HsColour.ACSS
124
29
1
n :: [Char]


rest
Language.Haskell.HsColour.ACSS
124
31
1
rest :: [[Char]]


f
Language.Haskell.HsColour.ACSS
125
5
1
f :: [Char]


GHC.Classes./=
Language.Haskell.HsColour.ACSS
125
7
1
(/=) :: Eq a => a -> a -> Bool


mname
Language.Haskell.HsColour.ACSS
125
10
1
mname :: String


parseLines
Language.Haskell.HsColour.ACSS
126
69
2
parseLines ::
  [Char] -> Int -> [[Char]] -> [(Loc, ([Char], [Char]))]


mname
Language.Haskell.HsColour.ACSS
126
80
1
mname :: String


i
Language.Haskell.HsColour.ACSS
126
87
1
i :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
126
89
1
(+) :: Num a => a -> a -> a


GHC.Num.+
Language.Haskell.HsColour.ACSS
126
93
1
(+) :: Num a => a -> a -> a


num
Language.Haskell.HsColour.ACSS
126
95
1
num :: Int


rest'
Language.Haskell.HsColour.ACSS
126
100
1
rest' :: [[Char]]


GHC.Base.otherwise
Language.Haskell.HsColour.ACSS
127
5
1
otherwise :: Bool


Language.Haskell.HsColour.ACSS.L
Language.Haskell.HsColour.ACSS
128
6
1
L :: (Int, Int) -> Loc


line
Language.Haskell.HsColour.ACSS
128
9
1
line :: Int


col
Language.Haskell.HsColour.ACSS
128
15
1
col :: Int


x
Language.Haskell.HsColour.ACSS
128
22
1
x :: [Char]


anns
Language.Haskell.HsColour.ACSS
128
25
1
anns :: [Char]


GHC.Types.:
Language.Haskell.HsColour.ACSS
128
32
1
(:) :: a -> [a] -> [a]


parseLines
Language.Haskell.HsColour.ACSS
128
34
2
parseLines ::
  [Char] -> Int -> [[Char]] -> [(Loc, ([Char], [Char]))]


mname
Language.Haskell.HsColour.ACSS
128
45
1
mname :: String


i
Language.Haskell.HsColour.ACSS
128
52
1
i :: Int


GHC.Num.+
Language.Haskell.HsColour.ACSS
128
54
1
(+) :: Num a => a -> a -> a


GHC.Num.+
Language.Haskell.HsColour.ACSS
128
58
1
(+) :: Num a => a -> a -> a


num
Language.Haskell.HsColour.ACSS
128
60
1
num :: Int


rest'
Language.Haskell.HsColour.ACSS
128
65
1
rest' :: [[Char]]


line
Language.Haskell.HsColour.ACSS
129
11
1
line :: Int


Text.Read.read
Language.Haskell.HsColour.ACSS
129
20
1
read :: Read a => String -> a


l
Language.Haskell.HsColour.ACSS
129
25
1
l :: Int


col
Language.Haskell.HsColour.ACSS
130
11
1
col :: Int


Text.Read.read
Language.Haskell.HsColour.ACSS
130
20
1
read :: Read a => String -> a


c
Language.Haskell.HsColour.ACSS
130
25
1
c :: Int


num
Language.Haskell.HsColour.ACSS
131
11
1
num :: Int


Text.Read.read
Language.Haskell.HsColour.ACSS
131
20
1
read :: Read a => String -> a


n
Language.Haskell.HsColour.ACSS
131
25
1
n :: Int


anns
Language.Haskell.HsColour.ACSS
132
11
1
anns :: [Char]


Data.List.intercalate
Language.Haskell.HsColour.ACSS
132
19
1
intercalate :: [a] -> [[a]] -> [a]


GHC.Base.$
Language.Haskell.HsColour.ACSS
132
36
1
($) :: (a -> b) -> a -> b


GHC.List.take
Language.Haskell.HsColour.ACSS
132
38
1
take :: Int -> [a] -> [a]


num
Language.Haskell.HsColour.ACSS
132
43
1
num :: Int


rest
Language.Haskell.HsColour.ACSS
132
47
1
rest :: [Either a b]


rest'
Language.Haskell.HsColour.ACSS
133
11
1
rest' :: [[Char]]


GHC.List.drop
Language.Haskell.HsColour.ACSS
133
19
1
drop :: Int -> [a] -> [a]


num
Language.Haskell.HsColour.ACSS
133
24
1
num :: Int


rest
Language.Haskell.HsColour.ACSS
133
28
1
rest :: [Either a b]


i
Language.Haskell.HsColour.ACSS
134
14
1
i :: Int


GHC.Err.error
Language.Haskell.HsColour.ACSS
135
5
1
error :: [Char] -> a


GHC.Base.$
Language.Haskell.HsColour.ACSS
135
11
1
($) :: (a -> b) -> a -> b


GHC.Base.++
Language.Haskell.HsColour.ACSS
135
51
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ACSS
135
54
1
show :: Show a => a -> String


i
Language.Haskell.HsColour.ACSS
135
59
1
i :: Int


Language.Haskell.HsColour.ACSS.takeFileName
Language.Haskell.HsColour.ACSS
137
1
1
takeFileName :: [Char] -> [Char]


s
Language.Haskell.HsColour.ACSS
137
14
1
s :: [Char]


GHC.Base.map
Language.Haskell.HsColour.ACSS
137
18
1
map :: (a -> b) -> [a] -> [b]


slashWhite
Language.Haskell.HsColour.ACSS
137
22
1
slashWhite :: Char -> Char


s
Language.Haskell.HsColour.ACSS
137
33
1
s :: String


slashWhite
Language.Haskell.HsColour.ACSS
138
9
1
slashWhite :: Char -> Char


GHC.Show.D:Show
Language.Haskell.HsColour.ACSS
140
10
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


m
Language.Haskell.HsColour.ACSS
141
13
1
m :: Map Loc (String, String)


GHC.Base.++
Language.Haskell.HsColour.ACSS
141
25
1
(++) :: [a] -> [a] -> [a]


GHC.List.concatMap
Language.Haskell.HsColour.ACSS
141
29
1
concatMap :: (a -> [b]) -> [a] -> [b]


ppAnnot
Language.Haskell.HsColour.ACSS
141
39
1
ppAnnot :: (Loc, ([Char], String)) -> [Char]


GHC.Base.$
Language.Haskell.HsColour.ACSS
141
47
1
($) :: (a -> b) -> a -> b


Data.Map.toList
Language.Haskell.HsColour.ACSS
141
49
1
toList :: Map k a -> [(k, a)]


m
Language.Haskell.HsColour.ACSS
141
58
1
m :: Map Loc (String, String)


ppAnnot
Language.Haskell.HsColour.ACSS
142
11
1
ppAnnot :: (Loc, ([Char], String)) -> [Char]


l
Language.Haskell.HsColour.ACSS
142
23
1
l :: Int


c
Language.Haskell.HsColour.ACSS
142
26
1
c :: Int


x
Language.Haskell.HsColour.ACSS
142
31
1
x :: [Char]


s
Language.Haskell.HsColour.ACSS
142
33
1
s :: String


x
Language.Haskell.HsColour.ACSS
142
40
1
x :: [Char]


GHC.Base.++
Language.Haskell.HsColour.ACSS
142
42
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.ACSS
143
37
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ACSS
143
40
1
show :: Show a => a -> String


l
Language.Haskell.HsColour.ACSS
143
45
1
l :: Int


GHC.Base.++
Language.Haskell.HsColour.ACSS
143
47
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.ACSS
144
37
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ACSS
144
40
1
show :: Show a => a -> String


c
Language.Haskell.HsColour.ACSS
144
45
1
c :: Int


GHC.Base.++
Language.Haskell.HsColour.ACSS
144
47
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.ACSS
145
37
1
(++) :: [a] -> [a] -> [a]


GHC.Show.show
Language.Haskell.HsColour.ACSS
145
40
1
show :: Show a => a -> String


GHC.List.length
Language.Haskell.HsColour.ACSS
145
46
1
length :: [a] -> Int


GHC.Base.$
Language.Haskell.HsColour.ACSS
145
53
1
($) :: (a -> b) -> a -> b


Data.List.lines
Language.Haskell.HsColour.ACSS
145
55
1
lines :: String -> [String]


s
Language.Haskell.HsColour.ACSS
145
61
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.ACSS
145
64
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.ACSS
146
37
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.ACSS
146
40
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.ACSS
146
42
1
(++) :: [a] -> [a] -> [a]




Language.Haskell.HsColour.InlineCSS.hscolour
Language.Haskell.HsColour.InlineCSS
17
1
1
hscolour :: ColourPrefs -> Bool -> String -> String


prefs
Language.Haskell.HsColour.InlineCSS
17
10
1
prefs :: ColourPrefs


anchor
Language.Haskell.HsColour.InlineCSS
17
16
1
anchor :: Bool


Language.Haskell.HsColour.InlineCSS.pre
Language.Haskell.HsColour.InlineCSS
18
3
1
pre :: String -> String


GHC.Base..
Language.Haskell.HsColour.InlineCSS
19
3
1
(.) :: (b -> c) -> (a -> b) -> a -> c


anchor
Language.Haskell.HsColour.InlineCSS
19
9
1
anchor :: Bool


Language.Haskell.HsColour.HTML.renderNewLinesAnchors
Language.Haskell.HsColour.InlineCSS
20
14
1
renderNewLinesAnchors :: String -> String


GHC.Base..
Language.Haskell.HsColour.InlineCSS
21
14
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.List.concatMap
Language.Haskell.HsColour.InlineCSS
21
16
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.HTML.renderAnchors
Language.Haskell.HsColour.InlineCSS
21
27
1
renderAnchors :: (a -> String) -> Either String a -> String


Language.Haskell.HsColour.InlineCSS.renderToken
Language.Haskell.HsColour.InlineCSS
21
42
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


prefs
Language.Haskell.HsColour.InlineCSS
21
54
1
prefs :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.InlineCSS
22
14
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Anchors.insertAnchors
Language.Haskell.HsColour.InlineCSS
22
16
2
insertAnchors ::
  [(TokenType, String)] -> [Either Anchor (TokenType, String)]


GHC.List.concatMap
Language.Haskell.HsColour.InlineCSS
23
14
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.InlineCSS.renderToken
Language.Haskell.HsColour.InlineCSS
23
25
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


prefs
Language.Haskell.HsColour.InlineCSS
23
37
1
prefs :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.InlineCSS
24
3
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.InlineCSS
24
5
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.InlineCSS.top'n'tail
Language.Haskell.HsColour.InlineCSS
27
1
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour.InlineCSS
27
12
1
title :: String


Language.Haskell.HsColour.InlineCSS.cssPrefix
Language.Haskell.HsColour.InlineCSS
27
22
1
cssPrefix :: [Char] -> String


title
Language.Haskell.HsColour.InlineCSS
27
32
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
27
38
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.InlineCSS
27
42
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
27
45
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.cssSuffix
Language.Haskell.HsColour.InlineCSS
27
47
1
cssSuffix :: String


Language.Haskell.HsColour.InlineCSS.pre
Language.Haskell.HsColour.InlineCSS
30
1
1
pre :: String -> String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
30
68
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.InlineCSS
31
7
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
31
10
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.renderToken
Language.Haskell.HsColour.InlineCSS
34
1
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


prefs
Language.Haskell.HsColour.InlineCSS
34
13
1
prefs :: ColourPrefs


cls
Language.Haskell.HsColour.InlineCSS
34
20
1
cls :: TokenType


text
Language.Haskell.HsColour.InlineCSS
34
24
1
text :: String


Language.Haskell.HsColour.InlineCSS.stylise
Language.Haskell.HsColour.InlineCSS
35
3
1
stylise :: [Highlight] -> String -> String


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.InlineCSS
35
12
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


prefs
Language.Haskell.HsColour.InlineCSS
35
22
1
prefs :: ColourPrefs


cls
Language.Haskell.HsColour.InlineCSS
35
28
1
cls :: TokenType


GHC.Base.$
Language.Haskell.HsColour.InlineCSS
35
33
1
($) :: (a -> b) -> a -> b


cls
Language.Haskell.HsColour.InlineCSS
36
6
1
cls :: TokenType


GHC.Classes.==
Language.Haskell.HsColour.InlineCSS
36
10
1
(==) :: Eq a => a -> a -> Bool


Language.Haskell.HsColour.Classify.Comment
Language.Haskell.HsColour.InlineCSS
36
13
1
Comment :: TokenType


Language.Haskell.HsColour.HTML.renderComment
Language.Haskell.HsColour.InlineCSS
36
26
1
renderComment :: String -> String


text
Language.Haskell.HsColour.InlineCSS
36
40
1
text :: String


Language.Haskell.HsColour.HTML.escape
Language.Haskell.HsColour.InlineCSS
36
50
1
escape :: String -> String


text
Language.Haskell.HsColour.InlineCSS
36
57
1
text :: String


Language.Haskell.HsColour.InlineCSS.stylise
Language.Haskell.HsColour.InlineCSS
39
1
1
stylise :: [Highlight] -> String -> String


hs
Language.Haskell.HsColour.InlineCSS
39
9
1
hs :: [Highlight]


s
Language.Haskell.HsColour.InlineCSS
39
12
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
39
33
1
(++) :: [a] -> [a] -> [a]


GHC.List.concatMap
Language.Haskell.HsColour.InlineCSS
39
36
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.InlineCSS.style
Language.Haskell.HsColour.InlineCSS
39
46
1
style :: Highlight -> String


hs
Language.Haskell.HsColour.InlineCSS
39
52
1
hs :: [Highlight]


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
39
55
1
(++) :: [a] -> [a] -> [a]


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
39
64
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.InlineCSS
39
66
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
39
67
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.cssPrefix
Language.Haskell.HsColour.InlineCSS
41
1
1
cssPrefix :: [Char] -> String


title
Language.Haskell.HsColour.InlineCSS
41
11
1
title :: [Char]


Data.List.unlines
Language.Haskell.HsColour.InlineCSS
41
19
1
unlines :: [String] -> String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
47
15
1
(++) :: [a] -> [a] -> [a]


title
Language.Haskell.HsColour.InlineCSS
47
17
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
47
22
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.cssSuffix
Language.Haskell.HsColour.InlineCSS
52
1
1
cssSuffix :: String


Data.List.unlines
Language.Haskell.HsColour.InlineCSS
52
13
1
unlines :: [String] -> String


Language.Haskell.HsColour.InlineCSS.style
Language.Haskell.HsColour.InlineCSS
58
1
1
style :: Highlight -> String


c
Language.Haskell.HsColour.InlineCSS
65
19
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
65
33
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.csscolour
Language.Haskell.HsColour.InlineCSS
65
35
1
csscolour :: Colour -> String


c
Language.Haskell.HsColour.InlineCSS
65
45
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
65
46
1
(++) :: [a] -> [a] -> [a]


c
Language.Haskell.HsColour.InlineCSS
66
19
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
66
44
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.csscolour
Language.Haskell.HsColour.InlineCSS
66
46
1
csscolour :: Colour -> String


c
Language.Haskell.HsColour.InlineCSS
66
56
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.InlineCSS
66
57
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.InlineCSS.csscolour
Language.Haskell.HsColour.InlineCSS
70
1
1
csscolour :: Colour -> String


r
Language.Haskell.HsColour.InlineCSS
78
16
1
r :: Word8


g
Language.Haskell.HsColour.InlineCSS
78
18
1
g :: Word8


b
Language.Haskell.HsColour.InlineCSS
78
20
1
b :: Word8


Text.Printf.printf
Language.Haskell.HsColour.InlineCSS
78
25
1
printf :: PrintfType r => String -> r


r
Language.Haskell.HsColour.InlineCSS
78
48
1
r :: Word8


g
Language.Haskell.HsColour.InlineCSS
78
50
1
g :: Word8


b
Language.Haskell.HsColour.InlineCSS
78
52
1
b :: Word8




Language.Haskell.HsColour.LaTeX.hscolour
Language.Haskell.HsColour.LaTeX
13
1
1
hscolour :: ColourPrefs -> String -> String


pref
Language.Haskell.HsColour.LaTeX
13
10
1
pref :: ColourPrefs


GHC.List.concatMap
Language.Haskell.HsColour.LaTeX
13
17
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.LaTeX.renderToken
Language.Haskell.HsColour.LaTeX
13
28
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.LaTeX
13
40
1
pref :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.LaTeX
13
46
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.LaTeX
13
48
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.LaTeX.top'n'tail
Language.Haskell.HsColour.LaTeX
16
1
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour.LaTeX
16
12
1
title :: String


Language.Haskell.HsColour.LaTeX.latexPrefix
Language.Haskell.HsColour.LaTeX
16
21
1
latexPrefix :: [Char] -> String


title
Language.Haskell.HsColour.LaTeX
16
33
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.LaTeX
16
38
1
(++) :: [a] -> [a] -> [a]


GHC.Base..
Language.Haskell.HsColour.LaTeX
16
42
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.Base.++
Language.Haskell.HsColour.LaTeX
16
45
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.latexSuffix
Language.Haskell.HsColour.LaTeX
16
47
1
latexSuffix :: String


Language.Haskell.HsColour.LaTeX.renderToken
Language.Haskell.HsColour.LaTeX
21
1
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.LaTeX
21
13
1
pref :: ColourPrefs


text
Language.Haskell.HsColour.LaTeX
21
25
1
text :: String


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
21
33
1
filterSpace :: String -> String


text
Language.Haskell.HsColour.LaTeX
21
45
1
text :: String


pref
Language.Haskell.HsColour.LaTeX
22
13
1
pref :: ColourPrefs


cls
Language.Haskell.HsColour.LaTeX
22
19
1
cls :: TokenType


text
Language.Haskell.HsColour.LaTeX
22
23
1
text :: String


symb
Language.Haskell.HsColour.LaTeX
23
7
1
symb :: [Char]


cls
Language.Haskell.HsColour.LaTeX
23
19
1
cls :: TokenType


GHC.Base.++
Language.Haskell.HsColour.LaTeX
24
30
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.General.dropFirst
Language.Haskell.HsColour.LaTeX
24
34
1
dropFirst :: Eq a => a -> [a] -> [a]


GHC.Base.$
Language.Haskell.HsColour.LaTeX
24
49
1
($) :: (a -> b) -> a -> b


Language.Haskell.HsColour.General.dropLast
Language.Haskell.HsColour.LaTeX
24
51
1
dropLast :: Eq a => a -> [a] -> [a]


GHC.Base.$
Language.Haskell.HsColour.LaTeX
24
65
1
($) :: (a -> b) -> a -> b


text
Language.Haskell.HsColour.LaTeX
24
67
1
text :: String


GHC.Base.++
Language.Haskell.HsColour.LaTeX
24
73
1
(++) :: [a] -> [a] -> [a]


text
Language.Haskell.HsColour.LaTeX
25
25
1
text :: String


style
Language.Haskell.HsColour.LaTeX
26
7
1
style :: [Highlight]


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.LaTeX
26
15
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


pref
Language.Haskell.HsColour.LaTeX
26
25
1
pref :: ColourPrefs


cls
Language.Haskell.HsColour.LaTeX
26
30
1
cls :: TokenType


pre
Language.Haskell.HsColour.LaTeX
27
8
1
pre :: [String]


post
Language.Haskell.HsColour.LaTeX
27
13
1
post :: [String]


GHC.List.unzip
Language.Haskell.HsColour.LaTeX
27
21
1
unzip :: [(a, b)] -> ([a], [b])


GHC.Base.$
Language.Haskell.HsColour.LaTeX
27
27
1
($) :: (a -> b) -> a -> b


GHC.Base.map
Language.Haskell.HsColour.LaTeX
27
29
1
map :: (a -> b) -> [a] -> [b]


Language.Haskell.HsColour.LaTeX.latexHighlight
Language.Haskell.HsColour.LaTeX
27
33
1
latexHighlight :: Highlight -> (String, String)


style
Language.Haskell.HsColour.LaTeX
27
48
1
style :: [Highlight]


GHC.List.concat
Language.Haskell.HsColour.LaTeX
28
6
1
concat :: [[a]] -> [a]


pre
Language.Haskell.HsColour.LaTeX
28
13
1
pre :: [String]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
28
17
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
28
20
1
filterSpecial :: String -> String


symb
Language.Haskell.HsColour.LaTeX
28
34
1
symb :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
28
39
1
(++) :: [a] -> [a] -> [a]


GHC.List.concat
Language.Haskell.HsColour.LaTeX
28
42
1
concat :: [[a]] -> [a]


post
Language.Haskell.HsColour.LaTeX
28
49
1
post :: [String]


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
33
1
1
filterSpace :: String -> String


ss
Language.Haskell.HsColour.LaTeX
33
19
1
ss :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
33
29
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
33
34
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
33
36
1
filterSpace :: String -> String


ss
Language.Haskell.HsColour.LaTeX
33
48
1
ss :: [Char]


ss
Language.Haskell.HsColour.LaTeX
34
18
1
ss :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
34
37
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
34
40
1
filterSpace :: String -> String


ss
Language.Haskell.HsColour.LaTeX
34
52
1
ss :: [Char]


ss
Language.Haskell.HsColour.LaTeX
35
19
1
ss :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
35
35
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
35
38
1
filterSpace :: String -> String


ss
Language.Haskell.HsColour.LaTeX
35
50
1
ss :: [Char]


c
Language.Haskell.HsColour.LaTeX
36
14
1
c :: Char


ss
Language.Haskell.HsColour.LaTeX
36
16
1
ss :: [Char]


c
Language.Haskell.HsColour.LaTeX
36
25
1
c :: Char


GHC.Types.:
Language.Haskell.HsColour.LaTeX
36
26
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpace
Language.Haskell.HsColour.LaTeX
36
28
1
filterSpace :: String -> String


ss
Language.Haskell.HsColour.LaTeX
36
40
1
ss :: [Char]


GHC.Types.[]
Language.Haskell.HsColour.LaTeX
37
25
1
[] :: [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
43
1
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
43
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
43
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
43
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
43
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
43
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
44
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
44
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
44
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
44
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
44
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
45
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
45
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
45
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
45
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
45
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
46
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
46
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
46
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
46
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
46
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
47
20
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
47
39
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
47
42
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
47
56
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
48
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
48
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
48
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
48
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
48
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
49
20
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
49
51
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
49
54
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
49
68
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
50
21
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
50
42
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
50
45
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
50
59
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
51
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
51
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
51
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
51
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
51
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
52
20
1
cs :: [Char]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
52
31
1
(:) :: a -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.LaTeX
52
35
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
52
37
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
52
51
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
53
20
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
53
44
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
53
47
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
53
61
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
54
24
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
54
58
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
54
61
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
54
75
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
55
20
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
55
51
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
55
54
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
55
68
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
56
24
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
56
59
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
56
62
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
56
76
1
cs :: [Char]


cs
Language.Haskell.HsColour.LaTeX
57
20
1
cs :: [Char]


GHC.Base.++
Language.Haskell.HsColour.LaTeX
57
51
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
57
54
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
57
68
1
cs :: [Char]


c
Language.Haskell.HsColour.LaTeX
58
16
1
c :: Char


cs
Language.Haskell.HsColour.LaTeX
58
18
1
cs :: [Char]


c
Language.Haskell.HsColour.LaTeX
58
27
1
c :: Char


GHC.Types.:
Language.Haskell.HsColour.LaTeX
58
28
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.filterSpecial
Language.Haskell.HsColour.LaTeX
58
30
1
filterSpecial :: String -> String


cs
Language.Haskell.HsColour.LaTeX
58
44
1
cs :: [Char]


GHC.Types.[]
Language.Haskell.HsColour.LaTeX
59
27
1
[] :: [a]


Language.Haskell.HsColour.LaTeX.latexHighlight
Language.Haskell.HsColour.LaTeX
64
1
1
latexHighlight :: Highlight -> (String, String)


c
Language.Haskell.HsColour.LaTeX
71
28
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.LaTeX
71
48
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.latexColour
Language.Haskell.HsColour.LaTeX
71
51
1
latexColour :: Colour -> String


c
Language.Haskell.HsColour.LaTeX
71
63
1
c :: Char


GHC.Base.++
Language.Haskell.HsColour.LaTeX
71
65
1
(++) :: [a] -> [a] -> [a]


c
Language.Haskell.HsColour.LaTeX
72
28
1
c :: Colour


GHC.Base.++
Language.Haskell.HsColour.LaTeX
72
47
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.latexColour
Language.Haskell.HsColour.LaTeX
72
50
1
latexColour :: Colour -> String


c
Language.Haskell.HsColour.LaTeX
72
62
1
c :: Char


GHC.Base.++
Language.Haskell.HsColour.LaTeX
72
64
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.latexColour
Language.Haskell.HsColour.LaTeX
77
1
1
latexColour :: Colour -> String


c
Language.Haskell.HsColour.LaTeX
86
13
1
c :: Colour


Language.Haskell.HsColour.LaTeX.latexColour
Language.Haskell.HsColour.LaTeX
86
29
1
latexColour :: Colour -> String


Language.Haskell.HsColour.ColourHighlight.projectToBasicColour8
Language.Haskell.HsColour.LaTeX
86
42
1
projectToBasicColour8 :: Colour -> Colour


c
Language.Haskell.HsColour.LaTeX
86
64
1
c :: Char


Language.Haskell.HsColour.LaTeX.latexPrefix
Language.Haskell.HsColour.LaTeX
89
1
1
latexPrefix :: [Char] -> String


title
Language.Haskell.HsColour.LaTeX
89
13
1
title :: [Char]


Data.List.unlines
Language.Haskell.HsColour.LaTeX
89
21
1
unlines :: [String] -> String


GHC.Base.++
Language.Haskell.HsColour.LaTeX
100
16
1
(++) :: [a] -> [a] -> [a]


title
Language.Haskell.HsColour.LaTeX
100
18
1
title :: String


GHC.Base.++
Language.Haskell.HsColour.LaTeX
100
23
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.LaTeX.latexSuffix
Language.Haskell.HsColour.LaTeX
108
1
1
latexSuffix :: String


Data.List.unlines
Language.Haskell.HsColour.LaTeX
108
15
1
unlines :: [String] -> String




Language.Haskell.HsColour.MIRC.hscolour
Language.Haskell.HsColour.MIRC
15
1
1
hscolour :: ColourPrefs -> String -> String


pref
Language.Haskell.HsColour.MIRC
15
10
1
pref :: ColourPrefs


GHC.List.concatMap
Language.Haskell.HsColour.MIRC
15
17
1
concatMap :: (a -> [b]) -> [a] -> [b]


Language.Haskell.HsColour.MIRC.renderToken
Language.Haskell.HsColour.MIRC
15
28
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.MIRC
15
40
1
pref :: ColourPrefs


GHC.Base..
Language.Haskell.HsColour.MIRC
15
46
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.Classify.tokenise
Language.Haskell.HsColour.MIRC
15
48
1
tokenise :: String -> [(TokenType, String)]


Language.Haskell.HsColour.MIRC.renderToken
Language.Haskell.HsColour.MIRC
18
1
1
renderToken :: ColourPrefs -> (TokenType, String) -> String


pref
Language.Haskell.HsColour.MIRC
18
13
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.MIRC
18
19
1
t :: TokenType


s
Language.Haskell.HsColour.MIRC
18
21
1
s :: String


Language.Haskell.HsColour.MIRC.fontify
Language.Haskell.HsColour.MIRC
18
26
1
fontify :: [Highlight] -> [Char] -> String


Language.Haskell.HsColour.Colourise.colourise
Language.Haskell.HsColour.MIRC
18
35
1
colourise :: ColourPrefs -> TokenType -> [Highlight]


pref
Language.Haskell.HsColour.MIRC
18
45
1
pref :: ColourPrefs


t
Language.Haskell.HsColour.MIRC
18
50
1
t :: TokenType


s
Language.Haskell.HsColour.MIRC
18
53
1
s :: String


Language.Haskell.HsColour.MIRC.fontify
Language.Haskell.HsColour.MIRC
22
1
1
fontify :: [Highlight] -> [Char] -> String


hs
Language.Haskell.HsColour.MIRC
22
9
1
hs :: [Highlight]


Language.Haskell.HsColour.MIRC.mircColours
Language.Haskell.HsColour.MIRC
23
5
1
mircColours :: MircColour -> String -> String


Language.Haskell.HsColour.MIRC.joinColours
Language.Haskell.HsColour.MIRC
23
18
1
joinColours :: [Highlight] -> MircColour


hs
Language.Haskell.HsColour.MIRC
23
30
1
hs :: [Highlight]


GHC.Base..
Language.Haskell.HsColour.MIRC
24
5
1
(.) :: (b -> c) -> (a -> b) -> a -> c


highlight
Language.Haskell.HsColour.MIRC
24
7
1
highlight :: [Highlight] -> [Char] -> [Char]


GHC.List.filter
Language.Haskell.HsColour.MIRC
24
18
1
filter :: (a -> Bool) -> [a] -> [a]


GHC.List.elem
Language.Haskell.HsColour.MIRC
24
26
1
elem :: Eq a => a -> [a] -> Bool


Language.Haskell.HsColour.ColourHighlight.Normal
Language.Haskell.HsColour.MIRC
24
33
1
Normal :: Highlight


Language.Haskell.HsColour.ColourHighlight.Bold
Language.Haskell.HsColour.MIRC
24
40
1
Bold :: Highlight


Language.Haskell.HsColour.ColourHighlight.Underscore
Language.Haskell.HsColour.MIRC
24
45
1
Underscore :: Highlight


Language.Haskell.HsColour.ColourHighlight.ReverseVideo
Language.Haskell.HsColour.MIRC
24
56
1
ReverseVideo :: Highlight


hs
Language.Haskell.HsColour.MIRC
24
71
1
hs :: [Highlight]


highlight
Language.Haskell.HsColour.MIRC
26
5
1
highlight :: [Highlight] -> [Char] -> [Char]


s
Language.Haskell.HsColour.MIRC
26
18
1
s :: [Char]


s
Language.Haskell.HsColour.MIRC
26
26
1
s :: String


h
Language.Haskell.HsColour.MIRC
27
16
1
h :: Highlight


hs
Language.Haskell.HsColour.MIRC
27
18
1
hs :: [Highlight]


s
Language.Haskell.HsColour.MIRC
27
22
1
s :: [Char]


font
Language.Haskell.HsColour.MIRC
27
26
1
font :: Highlight -> [Char] -> [Char]


h
Language.Haskell.HsColour.MIRC
27
31
1
h :: Highlight


highlight
Language.Haskell.HsColour.MIRC
27
34
1
highlight :: [Highlight] -> [Char] -> [Char]


hs
Language.Haskell.HsColour.MIRC
27
44
1
hs :: [Highlight]


s
Language.Haskell.HsColour.MIRC
27
47
1
s :: String


font
Language.Haskell.HsColour.MIRC
29
5
1
font :: Highlight -> [Char] -> [Char]


s
Language.Haskell.HsColour.MIRC
29
25
1
s :: [Char]


s
Language.Haskell.HsColour.MIRC
29
29
1
s :: String


s
Language.Haskell.HsColour.MIRC
30
25
1
s :: [Char]


GHC.Types.:
Language.Haskell.HsColour.MIRC
30
34
1
(:) :: a -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
30
35
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.MIRC
30
36
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
31
25
1
s :: [Char]


GHC.Types.:
Language.Haskell.HsColour.MIRC
31
34
1
(:) :: a -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
31
35
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.MIRC
31
36
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
32
25
1
s :: [Char]


GHC.Types.:
Language.Haskell.HsColour.MIRC
32
34
1
(:) :: a -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
32
35
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.MIRC
32
36
1
(++) :: [a] -> [a] -> [a]


bg
Language.Haskell.HsColour.MIRC
35
6
1
bg :: Maybe Colour


Language.Haskell.HsColour.MIRC.Mirc
Language.Haskell.HsColour.MIRC
35
19
1
Mirc :: Colour -> Bool -> Maybe Colour -> Bool -> MircColour


Language.Haskell.HsColour.MIRC.fg
Language.Haskell.HsColour.MIRC
35
26
1
fg :: MircColour -> Colour


Language.Haskell.HsColour.MIRC.dim
Language.Haskell.HsColour.MIRC
35
38
1
dim :: MircColour -> Bool


Language.Haskell.HsColour.MIRC.bg
Language.Haskell.HsColour.MIRC
35
49
1
bg :: MircColour -> Maybe Colour


Language.Haskell.HsColour.MIRC.blink
Language.Haskell.HsColour.MIRC
35
67
1
blink :: MircColour -> Bool


Language.Haskell.HsColour.MIRC.joinColours
Language.Haskell.HsColour.MIRC
38
1
1
joinColours :: [Highlight] -> MircColour


GHC.Base.foldr
Language.Haskell.HsColour.MIRC
38
15
1
foldr :: (a -> b -> b) -> b -> [a] -> b


join
Language.Haskell.HsColour.MIRC
38
21
1
join :: Highlight -> MircColour -> MircColour


fg
Language.Haskell.HsColour.MIRC
38
33
1
fg :: Colour


Language.Haskell.HsColour.ColourHighlight.Black
Language.Haskell.HsColour.MIRC
38
36
1
Black :: Colour


dim
Language.Haskell.HsColour.MIRC
38
43
1
dim :: Bool


GHC.Bool.False
Language.Haskell.HsColour.MIRC
38
47
1
False :: Bool


bg
Language.Haskell.HsColour.MIRC
38
54
1
bg :: Maybe Colour


Data.Maybe.Nothing
Language.Haskell.HsColour.MIRC
38
57
1
Nothing :: Maybe a


blink
Language.Haskell.HsColour.MIRC
38
66
1
blink :: Bool


GHC.Bool.False
Language.Haskell.HsColour.MIRC
38
72
1
False :: Bool


join
Language.Haskell.HsColour.MIRC
40
5
1
join :: Highlight -> MircColour -> MircColour


mirc
Language.Haskell.HsColour.MIRC
40
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
40
33
1
mirc :: MircColour


blink
Language.Haskell.HsColour.MIRC
40
39
1
blink :: Bool


GHC.Bool.True
Language.Haskell.HsColour.MIRC
40
45
1
True :: Bool


mirc
Language.Haskell.HsColour.MIRC
41
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
41
33
1
mirc :: MircColour


dim
Language.Haskell.HsColour.MIRC
41
39
1
dim :: Bool


GHC.Bool.True
Language.Haskell.HsColour.MIRC
41
43
1
True :: Bool


fg
Language.Haskell.HsColour.MIRC
42
22
1
fg :: Colour


mirc
Language.Haskell.HsColour.MIRC
42
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
42
33
1
mirc :: MircColour


fg
Language.Haskell.HsColour.MIRC
42
39
1
fg :: Colour


fg
Language.Haskell.HsColour.MIRC
42
42
1
fg :: Colour


bg
Language.Haskell.HsColour.MIRC
43
22
1
bg :: Colour


mirc
Language.Haskell.HsColour.MIRC
43
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
43
33
1
mirc :: MircColour


bg
Language.Haskell.HsColour.MIRC
43
39
1
bg :: Maybe Colour


Data.Maybe.Just
Language.Haskell.HsColour.MIRC
43
42
1
Just :: a -> Maybe a


bg
Language.Haskell.HsColour.MIRC
43
47
1
bg :: Maybe Colour


mirc
Language.Haskell.HsColour.MIRC
44
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
44
33
1
mirc :: MircColour


fg
Language.Haskell.HsColour.MIRC
44
39
1
fg :: Colour


Language.Haskell.HsColour.ColourHighlight.Black
Language.Haskell.HsColour.MIRC
44
42
1
Black :: Colour


bg
Language.Haskell.HsColour.MIRC
44
49
1
bg :: Maybe Colour


Data.Maybe.Just
Language.Haskell.HsColour.MIRC
44
52
1
Just :: a -> Maybe a


Language.Haskell.HsColour.ColourHighlight.Black
Language.Haskell.HsColour.MIRC
44
57
1
Black :: Colour


mirc
Language.Haskell.HsColour.MIRC
45
26
1
mirc :: MircColour


mirc
Language.Haskell.HsColour.MIRC
45
33
1
mirc :: MircColour


Language.Haskell.HsColour.MIRC.mircColours
Language.Haskell.HsColour.MIRC
48
1
1
mircColours :: MircColour -> String -> String


fg
Language.Haskell.HsColour.MIRC
48
19
1
fg :: Colour


dim
Language.Haskell.HsColour.MIRC
48
22
1
dim :: Bool


blink
Language.Haskell.HsColour.MIRC
48
36
1
blink :: Bool


s
Language.Haskell.HsColour.MIRC
48
43
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.MIRC
48
52
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.MIRC.code
Language.Haskell.HsColour.MIRC
48
54
1
code :: Colour -> Bool -> String


fg
Language.Haskell.HsColour.MIRC
48
59
1
fg :: Colour


dim
Language.Haskell.HsColour.MIRC
48
62
1
dim :: Bool


GHC.Base.++
Language.Haskell.HsColour.MIRC
48
65
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
48
67
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.MIRC
48
68
1
(++) :: [a] -> [a] -> [a]


fg
Language.Haskell.HsColour.MIRC
49
19
1
fg :: Colour


dim
Language.Haskell.HsColour.MIRC
49
22
1
dim :: Bool


bg
Language.Haskell.HsColour.MIRC
49
32
1
bg :: Colour


blink
Language.Haskell.HsColour.MIRC
49
36
1
blink :: Bool


s
Language.Haskell.HsColour.MIRC
49
43
1
s :: String


GHC.Types.:
Language.Haskell.HsColour.MIRC
49
52
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.MIRC.code
Language.Haskell.HsColour.MIRC
49
54
1
code :: Colour -> Bool -> String


fg
Language.Haskell.HsColour.MIRC
49
59
1
fg :: Colour


dim
Language.Haskell.HsColour.MIRC
49
62
1
dim :: Bool


GHC.Base.++
Language.Haskell.HsColour.MIRC
49
65
1
(++) :: [a] -> [a] -> [a]


GHC.Types.:
Language.Haskell.HsColour.MIRC
50
52
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.MIRC.code
Language.Haskell.HsColour.MIRC
50
54
1
code :: Colour -> Bool -> String


bg
Language.Haskell.HsColour.MIRC
50
59
1
bg :: Maybe Colour


blink
Language.Haskell.HsColour.MIRC
50
62
1
blink :: Bool


GHC.Base.++
Language.Haskell.HsColour.MIRC
50
67
1
(++) :: [a] -> [a] -> [a]


s
Language.Haskell.HsColour.MIRC
50
69
1
s :: String


GHC.Base.++
Language.Haskell.HsColour.MIRC
50
70
1
(++) :: [a] -> [a] -> [a]


Language.Haskell.HsColour.MIRC.code
Language.Haskell.HsColour.MIRC
53
1
1
code :: Colour -> Bool -> String


c
Language.Haskell.HsColour.MIRC
69
6
1
c :: Colour


b
Language.Haskell.HsColour.MIRC
69
20
1
b :: Bool


Language.Haskell.HsColour.MIRC.code
Language.Haskell.HsColour.MIRC
69
24
1
code :: Colour -> Bool -> String


Language.Haskell.HsColour.ColourHighlight.projectToBasicColour8
Language.Haskell.HsColour.MIRC
69
30
1
projectToBasicColour8 :: Colour -> Colour


c
Language.Haskell.HsColour.MIRC
69
52
1
c :: Colour


b
Language.Haskell.HsColour.MIRC
69
55
1
b :: Bool




Language.Haskell.HsColour.hscolour
Language.Haskell.HsColour
41
1
9
hscolour ::
  Output
  -> ColourPrefs
  -> Bool
  -> Bool
  -> String
  -> Bool
  -> String
  -> String


output
Language.Haskell.HsColour
41
10
1
output :: Output


pref
Language.Haskell.HsColour
41
17
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
41
22
1
anchor :: Bool


partial
Language.Haskell.HsColour
41
29
1
partial :: Bool


title
Language.Haskell.HsColour
41
37
1
title :: String


partial
Language.Haskell.HsColour
42
13
1
partial :: Bool


GHC.Base.id
Language.Haskell.HsColour
42
26
1
id :: a -> a


Language.Haskell.HsColour.top'n'tail
Language.Haskell.HsColour
42
34
1
top'n'tail :: Output -> String -> String -> String


output
Language.Haskell.HsColour
42
45
1
output :: Output


title
Language.Haskell.HsColour
42
52
1
title :: String


GHC.Base..
Language.Haskell.HsColour
42
59
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.hscolour'
Language.Haskell.HsColour
43
9
1
hscolour' :: Output -> ColourPrefs -> Bool -> String -> String


output
Language.Haskell.HsColour
43
19
1
output :: Output


pref
Language.Haskell.HsColour
43
26
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
43
31
1
anchor :: Bool


output
Language.Haskell.HsColour
44
10
1
output :: Output


pref
Language.Haskell.HsColour
44
17
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
44
22
1
anchor :: Bool


partial
Language.Haskell.HsColour
44
29
1
partial :: Bool


title
Language.Haskell.HsColour
44
37
1
title :: String


partial
Language.Haskell.HsColour
45
13
1
partial :: Bool


GHC.Base.id
Language.Haskell.HsColour
45
26
1
id :: a -> a


Language.Haskell.HsColour.top'n'tail
Language.Haskell.HsColour
45
34
1
top'n'tail :: Output -> String -> String -> String


output
Language.Haskell.HsColour
45
45
1
output :: Output


title
Language.Haskell.HsColour
45
52
1
title :: String


GHC.Base..
Language.Haskell.HsColour
45
59
1
(.) :: (b -> c) -> (a -> b) -> a -> c


GHC.List.concatMap
Language.Haskell.HsColour
46
9
1
concatMap :: (a -> [b]) -> [a] -> [b]


chunk
Language.Haskell.HsColour
46
19
1
chunk :: Lit -> String


GHC.Base..
Language.Haskell.HsColour
46
25
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.joinL
Language.Haskell.HsColour
46
27
1
joinL :: [Lit] -> [Lit]


GHC.Base..
Language.Haskell.HsColour
46
33
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.classify
Language.Haskell.HsColour
46
35
1
classify :: [String] -> [Lit]


GHC.Base..
Language.Haskell.HsColour
46
44
1
(.) :: (b -> c) -> (a -> b) -> a -> c


Language.Haskell.HsColour.inlines
Language.Haskell.HsColour
46
46
1
inlines :: String -> [String]


chunk
Language.Haskell.HsColour
48
5
1
chunk :: Lit -> String


c
Language.Haskell.HsColour
48
17
1
c :: String


Language.Haskell.HsColour.hscolour'
Language.Haskell.HsColour
48
22
1
hscolour' :: Output -> ColourPrefs -> Bool -> String -> String


output
Language.Haskell.HsColour
48
32
1
output :: Output


pref
Language.Haskell.HsColour
48
39
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
48
44
1
anchor :: Bool


c
Language.Haskell.HsColour
48
51
1
c :: String


c
Language.Haskell.HsColour
49
16
1
c :: String


c
Language.Haskell.HsColour
49
22
1
c :: String


Language.Haskell.HsColour.hscolour'
Language.Haskell.HsColour
57
1
1
hscolour' :: Output -> ColourPrefs -> Bool -> String -> String


pref
Language.Haskell.HsColour
57
21
1
pref :: ColourPrefs


Language.Haskell.HsColour.TTY.hscolour
Language.Haskell.HsColour
57
35
1
hscolour :: ColourPrefs -> String -> String


pref
Language.Haskell.HsColour
57
52
1
pref :: ColourPrefs


tt
Language.Haskell.HsColour
58
17
1
tt :: TerminalType


pref
Language.Haskell.HsColour
58
21
1
pref :: ColourPrefs


Language.Haskell.HsColour.TTY.hscolourG
Language.Haskell.HsColour
58
35
1
hscolourG :: TerminalType -> ColourPrefs -> String -> [Char]


tt
Language.Haskell.HsColour
58
49
1
tt :: TerminalType


pref
Language.Haskell.HsColour
58
52
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour
59
21
1
pref :: ColourPrefs


Language.Haskell.HsColour.MIRC.hscolour
Language.Haskell.HsColour
59
35
1
hscolour :: ColourPrefs -> String -> String


pref
Language.Haskell.HsColour
59
52
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour
60
21
1
pref :: ColourPrefs


Language.Haskell.HsColour.LaTeX.hscolour
Language.Haskell.HsColour
60
35
1
hscolour :: ColourPrefs -> String -> String


pref
Language.Haskell.HsColour
60
52
1
pref :: ColourPrefs


pref
Language.Haskell.HsColour
61
21
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
61
26
1
anchor :: Bool


Language.Haskell.HsColour.HTML.hscolour
Language.Haskell.HsColour
61
35
1
hscolour :: ColourPrefs -> Bool -> String -> String


pref
Language.Haskell.HsColour
61
52
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
61
57
1
anchor :: Bool


anchor
Language.Haskell.HsColour
62
26
1
anchor :: Bool


Language.Haskell.HsColour.CSS.hscolour
Language.Haskell.HsColour
62
35
1
hscolour :: Bool -> String -> String


anchor
Language.Haskell.HsColour
62
57
1
anchor :: Bool


pref
Language.Haskell.HsColour
63
21
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
63
26
1
anchor :: Bool


Language.Haskell.HsColour.InlineCSS.hscolour
Language.Haskell.HsColour
63
35
1
hscolour :: ColourPrefs -> Bool -> String -> String


pref
Language.Haskell.HsColour
63
52
1
pref :: ColourPrefs


anchor
Language.Haskell.HsColour
63
57
1
anchor :: Bool


anchor
Language.Haskell.HsColour
64
26
1
anchor :: Bool


Language.Haskell.HsColour.ACSS.hscolour
Language.Haskell.HsColour
64
35
1
hscolour :: Bool -> String -> String


anchor
Language.Haskell.HsColour
64
57
1
anchor :: Bool


Language.Haskell.HsColour.top'n'tail
Language.Haskell.HsColour
70
1
1
top'n'tail :: Output -> String -> String -> String


GHC.Base.id
Language.Haskell.HsColour
70
26
1
id :: a -> a


GHC.Base.id
Language.Haskell.HsColour
71
26
1
id :: a -> a


GHC.Base.id
Language.Haskell.HsColour
72
26
1
id :: a -> a


title
Language.Haskell.HsColour
73
18
1
title :: String


Language.Haskell.HsColour.LaTeX.top'n'tail
Language.Haskell.HsColour
73
26
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour
73
43
1
title :: String


title
Language.Haskell.HsColour
74
18
1
title :: String


Language.Haskell.HsColour.HTML.top'n'tail
Language.Haskell.HsColour
74
26
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour
74
42
1
title :: String


title
Language.Haskell.HsColour
75
18
1
title :: String


Language.Haskell.HsColour.CSS.top'n'tail
Language.Haskell.HsColour
75
26
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour
75
42
1
title :: String


title
Language.Haskell.HsColour
76
18
1
title :: String


Language.Haskell.HsColour.InlineCSS.top'n'tail
Language.Haskell.HsColour
76
26
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour
76
42
1
title :: String


title
Language.Haskell.HsColour
77
18
1
title :: String


Language.Haskell.HsColour.CSS.top'n'tail
Language.Haskell.HsColour
77
26
1
top'n'tail :: String -> String -> String


title
Language.Haskell.HsColour
77
42
1
title :: String


unL
Language.Haskell.HsColour
80
6
1
unL :: String


Language.Haskell.HsColour.Code
Language.Haskell.HsColour
80
12
1
Code :: String -> Lit


Language.Haskell.HsColour.unL
Language.Haskell.HsColour
80
18
1
unL :: Lit -> String


Language.Haskell.HsColour.Lit
Language.Haskell.HsColour
80
35
1
Lit :: String -> Lit


GHC.Show.D:Show
Language.Haskell.HsColour
80
65
2
D:Show ::
  (Int -> a -> ShowS) -> (a -> String) -> ([a] -> ShowS) -> T:Show a


Language.Haskell.HsColour.inlines
Language.Haskell.HsColour
86
1
1
inlines :: String -> [String]


s
Language.Haskell.HsColour
86
9
1
s :: String


lines'
Language.Haskell.HsColour
86
13
1
lines' :: [Char] -> ([Char] -> [Char]) -> [[Char]]


s
Language.Haskell.HsColour
86
20
1
s :: [Char]


GHC.Base.id
Language.Haskell.HsColour
86
22
1
id :: a -> a


lines'
Language.Haskell.HsColour
88
3
1
lines' :: [Char] -> ([Char] -> [Char]) -> [[Char]]


acc
Language.Haskell.HsColour
88
25
1
acc :: [Char] -> [Char]


acc
Language.Haskell.HsColour
88
32
1
acc :: [Char] -> [Char]


GHC.Types.[]
Language.Haskell.HsColour
88
36
1
[] :: [a]


s
Language.Haskell.HsColour
89
22
1
s :: [Char]


acc
Language.Haskell.HsColour
89
25
1
acc :: [Char] -> [Char]


acc
Language.Haskell.HsColour
89
31
1
acc :: [Char] -> [Char]


GHC.Types.:
Language.Haskell.HsColour
89
42
1
(:) :: a -> [a] -> [a]


lines'
Language.Haskell.HsColour
89
44
1
lines' :: [Char] -> ([Char] -> [Char]) -> [[Char]]


s
Language.Haskell.HsColour
89
51
1
s :: [Char]


GHC.Base.id
Language.Haskell.HsColour
89
53
1
id :: a -> a


s
Language.Haskell.HsColour
91
16
1
s :: [Char]


acc
Language.Haskell.HsColour
91
25
1
acc :: [Char] -> [Char]


acc
Language.Haskell.HsColour
91
31
1
acc :: [Char] -> [Char]


GHC.Types.:
Language.Haskell.HsColour
91
42
1
(:) :: a -> [a] -> [a]


lines'
Language.Haskell.HsColour
91
44
1
lines' :: [Char] -> ([Char] -> [Char]) -> [[Char]]


s
Language.Haskell.HsColour
91
51
1
s :: [Char]


GHC.Base.id
Language.Haskell.HsColour
91
53
1
id :: a -> a


c
Language.Haskell.HsColour
92
11
1
c :: Char


s
Language.Haskell.HsColour
92
13
1
s :: [Char]


acc
Language.Haskell.HsColour
92
25
1
acc :: [Char] -> [Char]


lines'
Language.Haskell.HsColour
92
31
1
lines' :: [Char] -> ([Char] -> [Char]) -> [[Char]]


s
Language.Haskell.HsColour
92
38
1
s :: [Char]


acc
Language.Haskell.HsColour
92
41
1
acc :: [Char] -> [Char]


GHC.Base..
Language.Haskell.HsColour
92
45
1
(.) :: (b -> c) -> (a -> b) -> a -> c


c
Language.Haskell.HsColour
92
48
1
c :: String


GHC.Types.:
Language.Haskell.HsColour
92
49
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.classify
Language.Haskell.HsColour
97
1
1
classify :: [String] -> [Lit]


GHC.Types.[]
Language.Haskell.HsColour
97
27
1
[] :: [a]


x
Language.Haskell.HsColour
98
11
1
x :: String


xs
Language.Haskell.HsColour
98
13
1
xs :: [String]


Data.List.isPrefixOf
Language.Haskell.HsColour
98
34
1
isPrefixOf :: Eq a => [a] -> [a] -> Bool


x
Language.Haskell.HsColour
98
46
1
x :: String


Language.Haskell.HsColour.Lit
Language.Haskell.HsColour
99
27
1
Lit :: String -> Lit


x
Language.Haskell.HsColour
99
31
1
x :: String


GHC.Types.:
Language.Haskell.HsColour
99
32
1
(:) :: a -> [a] -> [a]


allProg
Language.Haskell.HsColour
99
34
1
allProg :: [[Char]] -> [Lit]


xs
Language.Haskell.HsColour
99
42
1
xs :: [String]


allProg
Language.Haskell.HsColour
100
10
1
allProg :: [[Char]] -> [Lit]


GHC.Types.[]
Language.Haskell.HsColour
100
27
1
[] :: [a]


x
Language.Haskell.HsColour
102
19
1
x :: [Char]


xs
Language.Haskell.HsColour
102
21
1
xs :: [[Char]]


Data.List.isPrefixOf
Language.Haskell.HsColour
102
40
1
isPrefixOf :: Eq a => [a] -> [a] -> Bool


x
Language.Haskell.HsColour
102
52
1
x :: String


Language.Haskell.HsColour.Lit
Language.Haskell.HsColour
103
27
1
Lit :: String -> Lit


x
Language.Haskell.HsColour
103
31
1
x :: String


GHC.Types.:
Language.Haskell.HsColour
103
32
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.classify
Language.Haskell.HsColour
103
34
1
classify :: [String] -> [Lit]


xs
Language.Haskell.HsColour
103
43
1
xs :: [String]


x
Language.Haskell.HsColour
104
19
1
x :: [Char]


xs
Language.Haskell.HsColour
104
21
1
xs :: [[Char]]


Language.Haskell.HsColour.Code
Language.Haskell.HsColour
104
27
1
Code :: String -> Lit


x
Language.Haskell.HsColour
104
32
1
x :: String


GHC.Types.:
Language.Haskell.HsColour
104
33
1
(:) :: a -> [a] -> [a]


allProg
Language.Haskell.HsColour
104
35
1
allProg :: [[Char]] -> [Lit]


xs
Language.Haskell.HsColour
104
43
1
xs :: [String]


x
Language.Haskell.HsColour
105
16
1
x :: [Char]


xs
Language.Haskell.HsColour
105
19
1
xs :: [String]


Language.Haskell.HsColour.Code
Language.Haskell.HsColour
105
27
1
Code :: String -> Lit


GHC.Types.:
Language.Haskell.HsColour
105
36
1
(:) :: a -> [a] -> [a]


x
Language.Haskell.HsColour
105
37
1
x :: String


GHC.Types.:
Language.Haskell.HsColour
105
40
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.classify
Language.Haskell.HsColour
105
42
1
classify :: [String] -> [Lit]


xs
Language.Haskell.HsColour
105
51
1
xs :: [String]


x
Language.Haskell.HsColour
106
11
1
x :: String


xs
Language.Haskell.HsColour
106
13
1
xs :: [String]


Language.Haskell.HsColour.Lit
Language.Haskell.HsColour
106
27
1
Lit :: String -> Lit


x
Language.Haskell.HsColour
106
31
1
x :: String


GHC.Types.:
Language.Haskell.HsColour
106
32
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.classify
Language.Haskell.HsColour
106
34
1
classify :: [String] -> [Lit]


xs
Language.Haskell.HsColour
106
43
1
xs :: [String]


Language.Haskell.HsColour.joinL
Language.Haskell.HsColour
110
1
1
joinL :: [Lit] -> [Lit]


GHC.Types.[]
Language.Haskell.HsColour
110
29
1
[] :: [a]


c
Language.Haskell.HsColour
111
13
1
c :: String


c2
Language.Haskell.HsColour
111
20
1
c2 :: String


xs
Language.Haskell.HsColour
111
23
1
xs :: [Lit]


Language.Haskell.HsColour.joinL
Language.Haskell.HsColour
111
29
1
joinL :: [Lit] -> [Lit]


Language.Haskell.HsColour.Code
Language.Haskell.HsColour
111
36
1
Code :: String -> Lit


c
Language.Haskell.HsColour
111
42
1
c :: String


GHC.Base.++
Language.Haskell.HsColour
111
43
1
(++) :: [a] -> [a] -> [a]


c2
Language.Haskell.HsColour
111
45
1
c2 :: String


GHC.Types.:
Language.Haskell.HsColour
111
48
1
(:) :: a -> [a] -> [a]


xs
Language.Haskell.HsColour
111
49
1
xs :: [String]


c
Language.Haskell.HsColour
112
12
1
c :: String


c2
Language.Haskell.HsColour
112
19
1
c2 :: String


xs
Language.Haskell.HsColour
112
23
1
xs :: [Lit]


Language.Haskell.HsColour.joinL
Language.Haskell.HsColour
112
29
1
joinL :: [Lit] -> [Lit]


Language.Haskell.HsColour.Lit
Language.Haskell.HsColour
112
36
1
Lit :: String -> Lit


c
Language.Haskell.HsColour
112
42
1
c :: String


GHC.Base.++
Language.Haskell.HsColour
112
43
1
(++) :: [a] -> [a] -> [a]


c2
Language.Haskell.HsColour
112
45
1
c2 :: String


GHC.Types.:
Language.Haskell.HsColour
112
48
1
(:) :: a -> [a] -> [a]


xs
Language.Haskell.HsColour
112
49
1
xs :: [String]


any
Language.Haskell.HsColour
113
8
1
any :: Lit


xs
Language.Haskell.HsColour
113
12
1
xs :: [Lit]


any
Language.Haskell.HsColour
113
29
1
any :: Lit


GHC.Types.:
Language.Haskell.HsColour
113
32
1
(:) :: a -> [a] -> [a]


Language.Haskell.HsColour.joinL
Language.Haskell.HsColour
113
34
1
joinL :: [Lit] -> [Lit]


xs
Language.Haskell.HsColour
113
40
1
xs :: [String]


